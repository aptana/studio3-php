
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue May 04 11:31:38 PDT 2010
//----------------------------------------------------

package org2.eclipse.php.internal.core.ast.scanner.php5;

import java.util.*;

import org2.eclipse.dltk.ast.Modifiers;
import org2.eclipse.php.internal.core.ast.nodes.*;
import org2.eclipse.php.internal.core.ast.scanner.AbstractASTParser;

/** CUP v0.10k generated parser.
  * @version Tue May 04 11:31:38 PDT 2010
  */
@SuppressWarnings({"nls", "rawtypes"})
public class PhpAstParser extends AbstractASTParser {

  /** Default constructor. */
  public PhpAstParser() {super();}

  /** Constructor which sets the default scanner. */
  public PhpAstParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0160\000\002\003\003\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\006\000\002\007\004\000" +
    "\002\007\002\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\006\000\002\006\003\000\002\011" +
    "\005\000\002\011\011\000\002\011\014\000\002\011\007" +
    "\000\002\011\011\000\002\011\013\000\002\011\007\000" +
    "\002\011\004\000\002\011\005\000\002\011\004\000\002" +
    "\011\005\000\002\011\004\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\003\000\002\011\004\000\002\011\005\000" +
    "\002\011\007\000\002\011\012\000\002\011\012\000\002" +
    "\011\007\000\002\011\003\000\002\011\017\000\002\011" +
    "\005\000\002\011\003\000\002\011\004\000\002\123\003" +
    "\000\002\123\002\000\002\124\003\000\002\124\004\000" +
    "\002\125\012\000\002\012\003\000\002\012\005\000\002" +
    "\013\003\000\002\014\003\000\002\014\005\000\002\120" +
    "\003\000\002\121\003\000\002\045\002\000\002\045\003" +
    "\000\002\126\013\000\002\127\011\000\002\127\010\000" +
    "\002\130\003\000\002\130\004\000\002\130\004\000\002" +
    "\131\002\000\002\131\004\000\002\104\003\000\002\105" +
    "\002\000\002\105\004\000\002\132\002\000\002\132\004" +
    "\000\002\133\003\000\002\133\005\000\002\015\002\000" +
    "\002\015\004\000\002\016\003\000\002\016\004\000\002" +
    "\017\003\000\002\017\005\000\002\020\003\000\002\020" +
    "\005\000\002\021\003\000\002\021\005\000\002\022\005" +
    "\000\002\022\007\000\002\023\005\000\002\023\006\000" +
    "\002\023\005\000\002\023\006\000\002\024\002\000\002" +
    "\024\007\000\002\024\006\000\002\025\003\000\002\025" +
    "\003\000\002\026\003\000\002\026\005\000\002\027\002" +
    "\000\002\027\010\000\002\030\002\000\002\030\011\000" +
    "\002\031\002\000\002\031\004\000\002\032\002\000\002" +
    "\032\005\000\002\033\003\000\002\033\002\000\002\034" +
    "\003\000\002\034\005\000\002\035\004\000\002\035\005" +
    "\000\002\035\006\000\002\035\007\000\002\134\002\000" +
    "\002\134\003\000\002\134\003\000\002\036\003\000\002" +
    "\036\002\000\002\037\003\000\002\037\003\000\002\037" +
    "\004\000\002\037\005\000\002\037\005\000\002\037\006" +
    "\000\002\040\005\000\002\040\003\000\002\041\003\000" +
    "\002\041\004\000\002\041\006\000\002\042\005\000\002" +
    "\042\007\000\002\042\003\000\002\042\005\000\002\043" +
    "\004\000\002\043\002\000\002\044\005\000\002\044\004" +
    "\000\002\044\012\000\002\044\004\000\002\113\003\000" +
    "\002\113\005\000\002\136\003\000\002\136\003\000\002" +
    "\112\002\000\002\112\003\000\002\114\003\000\002\114" +
    "\004\000\002\115\003\000\002\115\003\000\002\115\003" +
    "\000\002\115\003\000\002\115\003\000\002\115\003\000" +
    "\002\110\005\000\002\110\007\000\002\110\003\000\002" +
    "\110\005\000\002\111\007\000\002\111\006\000\002\046" +
    "\005\000\002\046\003\000\002\047\002\000\002\047\003" +
    "\000\002\050\005\000\002\050\003\000\002\051\010\000" +
    "\002\051\005\000\002\051\006\000\002\051\010\000\002" +
    "\051\005\000\002\051\004\000\002\051\005\000\002\051" +
    "\005\000\002\051\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\005\000\002\051\005\000\002\051\005\000" +
    "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\004\000\002\051\004\000\002\051\004\000\002\051" +
    "\004\000\002\051\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\005\000\002\051\005\000\002\051\005\000" +
    "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\005\000\002\051\005\000\002\051" +
    "\005\000\002\051\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\004\000\002\051\004\000\002\051\004\000" +
    "\002\051\004\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\005\000\002\051\005\000\002\051" +
    "\005\000\002\051\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\005\000\002\051\007\000\002\051\003\000" +
    "\002\051\004\000\002\051\004\000\002\051\004\000\002" +
    "\051\004\000\002\051\004\000\002\051\004\000\002\051" +
    "\004\000\002\051\004\000\002\051\004\000\002\051\003" +
    "\000\002\051\006\000\002\051\005\000\002\051\004\000" +
    "\002\052\006\000\002\052\010\000\002\052\010\000\002" +
    "\052\006\000\002\107\003\000\002\145\003\000\002\145" +
    "\003\000\002\147\006\000\002\147\003\000\002\151\004" +
    "\000\002\151\002\000\002\152\004\000\002\053\002\000" +
    "\002\053\004\000\002\053\005\000\002\054\002\000\002" +
    "\054\005\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\004\000\002\056\004\000\002" +
    "\056\006\000\002\056\003\000\002\153\005\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\005\000\002\057\005\000\002\060\002\000" +
    "\002\060\004\000\002\061\002\000\002\061\003\000\002" +
    "\062\007\000\002\062\005\000\002\062\005\000\002\062" +
    "\003\000\002\063\003\000\002\063\003\000\002\135\003" +
    "\000\002\106\003\000\002\137\003\000\002\122\007\000" +
    "\002\122\003\000\002\117\004\000\002\117\002\000\002" +
    "\141\005\000\002\116\005\000\002\116\002\000\002\140" +
    "\003\000\002\140\004\000\002\142\005\000\002\154\003" +
    "\000\002\154\003\000\002\150\003\000\002\150\004\000" +
    "\002\150\003\000\002\064\006\000\002\064\006\000\002" +
    "\064\003\000\002\065\003\000\002\065\006\000\002\066" +
    "\002\000\002\066\003\000\002\067\003\000\002\067\003" +
    "\000\002\070\006\000\002\070\006\000\002\070\003\000" +
    "\002\071\003\000\002\071\005\000\002\072\003\000\002" +
    "\072\004\000\002\073\005\000\002\073\003\000\002\074" +
    "\003\000\002\074\006\000\002\074\002\000\002\075\002" +
    "\000\002\075\004\000\002\076\007\000\002\076\005\000" +
    "\002\076\005\000\002\076\003\000\002\076\010\000\002" +
    "\076\006\000\002\076\006\000\002\076\004\000\002\077" +
    "\004\000\002\077\004\000\002\077\002\000\002\100\003" +
    "\000\002\100\006\000\002\100\005\000\002\100\005\000" +
    "\002\100\010\000\002\100\005\000\002\101\003\000\002" +
    "\101\003\000\002\101\003\000\002\102\006\000\002\102" +
    "\006\000\002\102\004\000\002\102\004\000\002\102\006" +
    "\000\002\102\004\000\002\102\004\000\002\143\003\000" +
    "\002\143\005\000\002\146\005\000\002\144\003\000\002" +
    "\103\003\000\002\103\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02c3\000\002\001\ufffe\000\004\002\u02c5\001\002\000" +
    "\222\003\115\004\140\005\151\006\106\007\011\010\034" +
    "\011\053\012\061\014\074\016\126\017\121\020\117\021" +
    "\044\023\033\025\101\027\152\032\103\034\127\040\055" +
    "\041\120\042\107\044\134\045\041\047\147\050\025\051" +
    "\012\053\076\054\143\055\030\056\057\057\032\060\137" +
    "\065\145\066\013\067\020\070\045\071\047\072\132\073" +
    "\006\074\035\100\064\103\024\104\056\105\027\106\067" +
    "\107\051\110\123\111\105\116\063\134\010\154\104\155" +
    "\066\161\141\162\014\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\071\175\036\200" +
    "\075\204\042\205\062\206\017\212\144\215\100\216\112" +
    "\217\060\001\001\000\002\001\uff06\000\004\212\u02c2\001" +
    "\002\000\002\001\uffda\000\002\001\uff09\000\006\012\u02b7" +
    "\215\u02b8\001\002\000\004\212\u02a2\001\002\000\132\004" +
    "\140\006\106\007\011\010\034\011\053\012\061\016\126" +
    "\032\103\054\143\055\030\065\145\066\013\067\020\070" +
    "\045\071\047\072\132\073\006\074\035\104\056\105\027" +
    "\106\067\107\051\110\123\111\105\116\063\154\104\155" +
    "\066\161\141\162\014\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\071\175\036\200" +
    "\075\212\144\215\100\216\112\217\060\001\002\000\002" +
    "\001\uff1f\000\070\031\256\113\245\114\265\115\236\133" +
    "\242\134\u02a0\135\237\136\257\137\240\140\247\141\260" +
    "\142\264\143\251\144\234\145\246\146\263\147\261\150" +
    "\243\151\262\152\255\153\250\154\266\155\244\156\254" +
    "\157\252\160\235\163\241\001\002\000\004\057\u029f\001" +
    "\002\000\002\001\uff05\000\002\001\ufeda\000\002\001\uffca" +
    "\000\036\117\u012a\120\u012d\121\u012b\122\u0134\123\u012e\124" +
    "\u0133\125\u0130\126\u0132\127\u012c\130\u0129\131\u012f\132\u0131" +
    "\164\ufee9\165\ufee9\001\ufeeb\000\206\003\115\004\140\005" +
    "\151\006\106\007\011\010\034\011\053\012\061\014\074" +
    "\016\126\017\121\020\117\021\044\023\033\025\101\027" +
    "\152\032\103\034\127\040\055\041\120\044\134\045\041" +
    "\047\147\050\025\051\012\053\076\054\143\055\030\065" +
    "\145\066\013\067\020\070\045\071\047\072\132\073\006" +
    "\074\035\100\064\103\024\104\056\105\027\106\067\107" +
    "\051\110\123\111\105\116\063\134\010\154\104\155\066" +
    "\161\141\162\014\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\071\175\036\200\075" +
    "\204\042\212\144\215\100\216\112\217\060\001\002\000" +
    "\006\016\u029a\212\u0298\001\002\000\132\004\140\006\106" +
    "\007\011\010\034\011\053\012\061\016\126\032\103\054" +
    "\143\055\030\065\145\066\013\067\020\070\045\071\047" +
    "\072\132\073\006\074\035\104\056\105\027\106\067\107" +
    "\051\110\123\111\105\116\063\154\104\155\066\161\141" +
    "\162\014\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\071\175\036\200\075\212\144" +
    "\215\100\216\112\217\060\001\002\000\132\004\140\006" +
    "\106\007\011\010\034\011\053\012\061\016\126\032\103" +
    "\054\143\055\030\065\145\066\013\067\020\070\045\071" +
    "\047\072\132\073\006\074\035\104\056\105\027\106\067" +
    "\107\051\110\123\111\105\116\063\154\104\155\066\161" +
    "\141\162\014\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\071\175\036\200\075\212" +
    "\144\215\100\216\112\217\060\001\002\000\004\212\u0293" +
    "\001\002\000\004\102\u0291\001\002\000\002\001\uffc4\000" +
    "\004\212\u0281\001\002\000\004\102\uff17\001\ufea3\000\002" +
    "\001\ufeb8\000\132\004\140\006\106\007\011\010\034\011" +
    "\053\012\061\016\126\032\103\054\143\055\030\065\145" +
    "\066\013\067\020\070\045\071\047\072\132\073\006\074" +
    "\035\104\056\105\027\106\067\107\051\110\123\111\105" +
    "\116\063\154\104\155\066\161\141\162\014\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\071\175\036\200\075\212\144\215\100\216\112\217" +
    "\060\001\002\000\002\001\ufede\000\132\004\140\006\106" +
    "\007\011\010\034\011\053\012\061\016\126\032\103\054" +
    "\143\055\030\065\145\066\013\067\020\070\045\071\047" +
    "\072\132\073\006\074\035\104\056\105\027\106\067\107" +
    "\051\110\123\111\105\116\063\154\104\155\066\161\141" +
    "\162\014\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\071\175\036\200\075\212\144" +
    "\215\100\216\112\217\060\001\002\000\004\100\u0266\001" +
    "\002\000\004\012\u025d\001\002\000\002\001\ufedd\000\004" +
    "\212\u0255\001\002\000\002\001\uff04\000\004\010\u024b\001" +
    "\002\000\002\001\uff03\000\004\063\u0240\001\ufee7\000\004" +
    "\212\u023d\001\002\000\012\010\034\012\061\104\056\215" +
    "\100\001\002\000\002\001\ufefa\000\010\100\306\176\307" +
    "\212\ufee1\001\ufedc\000\134\004\140\006\106\007\011\010" +
    "\034\011\053\012\061\016\126\032\103\054\143\055\030" +
    "\065\145\066\013\067\020\070\045\071\047\072\132\073" +
    "\006\074\035\104\056\105\027\106\067\107\051\110\123" +
    "\111\105\116\063\134\u0239\154\104\155\066\161\141\162" +
    "\014\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\071\175\036\200\075\212\144\215" +
    "\100\216\112\217\060\001\002\000\002\001\ufea2\000\004" +
    "\212\u0236\001\002\000\002\001\ufeb8\000\002\001\ufea4\000" +
    "\004\057\u0233\001\002\000\132\004\140\006\106\007\011" +
    "\010\034\011\053\012\061\016\126\032\103\054\143\055" +
    "\030\065\145\066\013\067\020\070\045\071\047\072\132" +
    "\073\006\074\035\104\056\105\027\106\067\107\051\110" +
    "\123\111\105\116\063\154\104\155\066\161\141\162\014" +
    "\164\052\165\146\166\026\167\130\170\040\171\125\172" +
    "\072\173\133\174\071\175\036\200\075\212\144\215\100" +
    "\216\112\217\060\001\002\000\002\001\ufff8\000\002\001" +
    "\uff29\000\132\004\140\006\106\007\011\010\034\011\053" +
    "\012\061\016\126\032\103\054\143\055\030\065\145\066" +
    "\013\067\020\070\045\071\047\072\132\073\006\074\035" +
    "\104\056\105\027\106\067\107\051\110\123\111\105\116" +
    "\063\154\104\155\066\161\141\162\014\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\071\175\036\200\075\212\144\215\100\216\112\217\060" +
    "\001\002\000\132\004\140\006\106\007\011\010\034\011" +
    "\053\012\061\016\126\032\103\054\143\055\030\065\145" +
    "\066\013\067\020\070\045\071\047\072\132\073\006\074" +
    "\035\104\056\105\027\106\067\107\051\110\123\111\105" +
    "\116\063\154\104\155\066\161\141\162\014\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\071\175\036\200\075\212\144\215\100\216\112\217" +
    "\060\001\002\000\006\012\061\215\322\001\002\000\132" +
    "\004\140\006\106\007\011\010\034\011\053\012\061\016" +
    "\126\032\103\054\143\055\030\065\145\066\013\067\020" +
    "\070\045\071\047\072\132\073\006\074\035\104\056\105" +
    "\027\106\067\107\051\110\123\111\105\116\063\154\104" +
    "\155\066\161\141\162\014\164\052\165\146\166\026\167" +
    "\130\170\040\171\125\172\072\173\133\174\071\175\036" +
    "\200\075\212\144\215\100\216\112\217\060\001\002\000" +
    "\132\004\140\006\106\007\011\010\034\011\053\012\061" +
    "\016\126\032\103\054\143\055\030\065\145\066\013\067" +
    "\020\070\045\071\047\072\132\073\006\074\035\104\056" +
    "\105\027\106\067\107\051\110\123\111\105\116\063\154" +
    "\104\155\066\161\141\162\014\164\052\165\146\166\026" +
    "\167\130\170\040\171\125\172\072\173\133\174\071\175" +
    "\036\200\075\212\144\215\100\216\112\217\060\001\002" +
    "\000\002\001\ufef9\000\002\001\uffe1\000\010\010\304\012" +
    "\061\215\100\001\002\000\004\212\u0221\001\002\000\006" +
    "\164\u021f\165\u0220\001\002\000\004\100\323\001\ufecb\000" +
    "\004\212\u0209\001\002\000\002\001\ufffc\000\132\004\140" +
    "\006\106\007\011\010\034\011\053\012\061\016\126\032" +
    "\103\054\143\055\030\065\145\066\013\067\020\070\045" +
    "\071\047\072\132\073\006\074\035\104\056\105\027\106" +
    "\067\107\051\110\123\111\105\116\063\154\104\155\066" +
    "\161\141\162\014\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\071\175\036\200\075" +
    "\212\144\215\100\216\112\217\060\001\002\000\132\004" +
    "\140\006\106\007\011\010\034\011\053\012\061\016\126" +
    "\032\103\054\143\055\030\065\145\066\013\067\020\070" +
    "\045\071\047\072\132\073\006\074\035\104\056\105\027" +
    "\106\067\107\051\110\123\111\105\116\063\154\104\155" +
    "\066\161\141\162\014\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\071\175\036\200" +
    "\075\212\144\215\100\216\112\217\060\001\002\000\132" +
    "\004\140\006\106\007\011\010\034\011\053\012\061\016" +
    "\126\032\103\054\143\055\030\065\145\066\013\067\020" +
    "\070\045\071\047\072\132\073\006\074\035\104\056\105" +
    "\027\106\067\107\051\110\123\111\105\116\063\154\104" +
    "\155\066\161\141\162\014\164\052\165\146\166\026\167" +
    "\130\170\040\171\125\172\072\173\133\174\071\175\036" +
    "\200\075\212\144\215\100\216\112\217\060\001\002\000" +
    "\002\001\uff0a\000\004\141\u01bc\001\uffc9\000\002\001\ufef8" +
    "\000\002\001\ufff3\000\002\001\ufeb8\000\002\001\ufed6\000" +
    "\004\010\u019f\001\002\000\002\001\uffd7\000\002\001\ufed7" +
    "\000\206\003\115\004\140\005\151\006\106\007\011\010" +
    "\034\011\053\012\061\014\074\016\126\017\121\020\117" +
    "\021\044\023\033\025\101\027\152\032\103\034\127\040" +
    "\055\041\120\044\134\045\041\047\147\050\025\051\012" +
    "\053\076\054\143\055\030\065\145\066\013\067\020\070" +
    "\045\071\047\072\132\073\006\074\035\100\064\103\024" +
    "\104\056\105\027\106\067\107\051\110\123\111\105\116" +
    "\063\134\010\154\104\155\066\161\141\162\014\164\052" +
    "\165\146\166\026\167\130\170\040\171\125\172\072\173" +
    "\133\174\071\175\036\200\075\204\042\212\144\215\100" +
    "\216\112\217\060\001\002\000\134\004\140\006\106\007" +
    "\011\010\034\011\053\012\061\016\126\032\103\054\143" +
    "\055\030\065\145\066\013\067\020\070\045\071\047\072" +
    "\132\073\006\074\035\104\056\105\027\106\067\107\051" +
    "\110\123\111\105\116\063\134\u0196\154\104\155\066\161" +
    "\141\162\014\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\071\175\036\200\075\212" +
    "\144\215\100\216\112\217\060\001\002\000\132\004\140" +
    "\006\106\007\011\010\034\011\053\012\061\016\126\032" +
    "\103\054\143\055\030\065\145\066\013\067\020\070\045" +
    "\071\047\072\132\073\006\074\035\104\056\105\027\106" +
    "\067\107\051\110\123\111\105\116\063\154\104\155\066" +
    "\161\141\162\014\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\071\175\036\200\075" +
    "\212\144\215\100\216\112\217\060\001\002\000\002\001" +
    "\ufffb\000\132\004\140\006\106\007\011\010\034\011\053" +
    "\012\061\016\126\032\103\054\143\055\030\065\145\066" +
    "\013\067\020\070\045\071\047\072\132\073\006\074\035" +
    "\104\056\105\027\106\067\107\051\110\123\111\105\116" +
    "\063\154\104\155\066\161\141\162\014\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\071\175\036\200\075\212\144\215\100\216\112\217\060" +
    "\001\002\000\004\212\u0151\001\ufefb\000\132\004\140\006" +
    "\106\007\011\010\034\011\053\012\061\016\126\032\103" +
    "\054\143\055\030\065\145\066\013\067\020\070\045\071" +
    "\047\072\132\073\006\074\035\104\056\105\027\106\067" +
    "\107\051\110\123\111\105\116\063\154\104\155\066\161" +
    "\141\162\014\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\071\175\036\200\075\212" +
    "\144\215\100\216\112\217\060\001\002\000\002\001\uff08" +
    "\000\004\212\u0176\001\002\000\132\004\140\006\106\007" +
    "\011\010\034\011\053\012\061\016\126\032\103\054\143" +
    "\055\030\065\145\066\013\067\020\070\045\071\047\072" +
    "\132\073\006\074\035\104\056\105\027\106\067\107\051" +
    "\110\123\111\105\116\063\154\104\155\066\161\141\162" +
    "\014\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\071\175\036\200\075\212\144\215" +
    "\100\216\112\217\060\001\002\000\002\001\uffcb\000\002" +
    "\001\uff07\000\132\004\140\006\106\007\011\010\034\011" +
    "\053\012\061\016\126\032\103\054\143\055\030\065\145" +
    "\066\013\067\020\070\045\071\047\072\132\073\006\074" +
    "\035\104\056\105\027\106\067\107\051\110\123\111\105" +
    "\116\063\154\104\155\066\161\141\162\014\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\071\175\036\200\075\212\144\215\100\216\112\217" +
    "\060\001\002\000\134\004\140\006\106\007\011\010\034" +
    "\011\053\012\061\016\126\032\103\054\143\055\030\065" +
    "\145\066\013\067\020\070\045\071\047\072\132\073\006" +
    "\074\035\104\056\105\027\106\067\107\051\110\123\111" +
    "\105\116\063\134\u016f\154\104\155\066\161\141\162\014" +
    "\164\052\165\146\166\026\167\130\170\040\171\125\172" +
    "\072\173\133\174\071\175\036\200\075\212\144\215\100" +
    "\216\112\217\060\001\002\000\002\001\ufeec\000\002\001" +
    "\ufeed\000\002\001\uffbf\000\004\212\u016a\001\uff0f\000\132" +
    "\004\140\006\106\007\011\010\034\011\053\012\061\016" +
    "\126\032\103\054\143\055\030\065\145\066\013\067\020" +
    "\070\045\071\047\072\132\073\006\074\035\104\056\105" +
    "\027\106\067\107\051\110\123\111\105\116\063\154\104" +
    "\155\066\161\141\162\014\164\052\165\146\166\026\167" +
    "\130\170\040\171\125\172\072\173\133\174\071\175\036" +
    "\200\075\212\144\215\100\216\112\217\060\001\002\000" +
    "\002\001\ufffd\000\004\212\u0163\001\002\000\132\004\140" +
    "\006\106\007\011\010\034\011\053\012\061\016\126\032" +
    "\103\054\143\055\030\065\145\066\013\067\020\070\045" +
    "\071\047\072\132\073\006\074\035\104\056\105\027\106" +
    "\067\107\051\110\123\111\105\116\063\154\104\155\066" +
    "\161\141\162\014\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\071\175\036\200\075" +
    "\212\144\215\100\216\112\217\060\001\002\000\004\212" +
    "\u0154\001\002\000\012\010\034\012\061\104\056\215\100" +
    "\001\002\000\132\004\140\006\106\007\011\010\034\011" +
    "\053\012\061\016\126\032\103\054\143\055\030\065\145" +
    "\066\013\067\020\070\045\071\047\072\132\073\006\074" +
    "\035\104\056\105\027\106\067\107\051\110\123\111\105" +
    "\116\063\154\104\155\066\161\141\162\014\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\071\175\036\200\075\212\144\215\100\216\112\217" +
    "\060\001\002\000\002\001\uffff\000\004\212\232\001\002" +
    "\000\004\212\153\001\002\000\006\010\156\104\056\001" +
    "\002\000\006\112\211\213\210\001\002\000\004\117\157" +
    "\001\002\000\002\001\ufea3\000\034\006\106\007\011\010" +
    "\166\016\126\066\162\067\020\070\045\071\047\072\132" +
    "\073\006\104\056\154\160\155\167\001\002\000\034\006" +
    "\106\007\011\010\166\016\126\066\162\067\020\070\045" +
    "\071\047\072\132\073\006\104\056\154\160\155\167\001" +
    "\002\000\002\001\uff01\000\004\212\173\001\002\000\002" +
    "\001\uffae\000\002\001\uff02\000\002\001\ufefd\000\004\102" +
    "\171\001\ufea3\000\034\006\106\007\011\010\166\016\126" +
    "\066\162\067\020\070\045\071\047\072\132\073\006\104" +
    "\056\154\160\155\167\001\002\000\002\001\ufeff\000\004" +
    "\010\172\001\002\000\002\001\ufefc\000\034\006\106\007" +
    "\011\010\166\016\126\066\162\067\020\070\045\071\047" +
    "\072\132\073\006\104\056\154\160\155\167\001\ufef5\000" +
    "\004\213\206\001\002\000\004\112\201\001\ufef3\000\004" +
    "\064\177\001\ufeee\000\034\006\106\007\011\010\166\016" +
    "\126\066\162\067\020\070\045\071\047\072\132\073\006" +
    "\104\056\154\160\155\167\001\002\000\002\001\ufeef\000" +
    "\034\006\106\007\011\010\166\016\126\066\162\067\020" +
    "\070\045\071\047\072\132\073\006\104\056\154\160\155" +
    "\167\001\ufef2\000\002\001\ufef4\000\004\064\204\001\ufef0" +
    "\000\034\006\106\007\011\010\166\016\126\066\162\067" +
    "\020\070\045\071\047\072\132\073\006\104\056\154\160" +
    "\155\167\001\002\000\002\001\ufef1\000\002\001\ufefe\000" +
    "\002\001\uff00\000\210\003\115\004\140\005\151\006\106" +
    "\007\011\010\034\011\053\012\061\014\074\016\126\017" +
    "\121\020\117\021\044\023\033\025\101\027\152\032\103" +
    "\034\127\040\055\041\120\044\134\045\041\047\147\050" +
    "\025\051\012\053\076\054\143\055\030\065\145\066\013" +
    "\067\020\070\045\071\047\072\132\073\006\074\035\100" +
    "\064\103\024\104\056\105\027\106\067\107\051\110\123" +
    "\111\105\116\063\134\010\154\104\155\066\161\141\162" +
    "\014\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\071\175\036\200\075\204\042\212" +
    "\144\214\216\215\100\216\112\217\060\001\002\000\006" +
    "\010\156\104\056\001\002\000\004\117\213\001\002\000" +
    "\034\006\106\007\011\010\166\016\126\066\162\067\020" +
    "\070\045\071\047\072\132\073\006\104\056\154\160\155" +
    "\167\001\002\000\002\001\uffad\000\002\001\uffdb\000\002" +
    "\001\ufff8\000\002\001\uffb0\000\224\003\115\004\140\005" +
    "\151\006\106\007\011\010\034\011\053\012\061\014\074" +
    "\016\126\017\121\020\117\021\044\023\033\025\101\027" +
    "\152\030\224\032\103\034\127\040\055\041\120\042\107" +
    "\044\134\045\041\047\147\050\025\051\012\053\076\054" +
    "\143\055\030\056\222\057\032\060\137\065\145\066\013" +
    "\067\020\070\045\071\047\072\132\073\006\074\035\100" +
    "\064\103\024\104\056\105\027\106\067\107\051\110\123" +
    "\111\105\116\063\134\010\154\104\155\066\161\141\162" +
    "\014\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\071\175\036\200\075\204\042\205" +
    "\062\206\017\212\144\215\100\216\112\217\060\001\002" +
    "\000\002\001\ufff9\000\004\212\227\001\002\000\002\001" +
    "\ufff6\000\002\001\uffaf\000\002\001\ufff5\000\002\001\ufff7" +
    "\000\004\213\230\001\002\000\004\134\231\001\002\000" +
    "\002\001\ufff4\000\132\004\140\006\106\007\011\010\034" +
    "\011\053\012\061\016\126\032\103\054\143\055\030\065" +
    "\145\066\013\067\020\070\045\071\047\072\132\073\006" +
    "\074\035\104\056\105\027\106\067\107\051\110\123\111" +
    "\105\116\063\154\104\155\066\161\141\162\014\164\052" +
    "\165\146\166\026\167\130\170\040\171\125\172\072\173" +
    "\133\174\071\175\036\200\075\212\144\215\100\216\112" +
    "\217\060\001\002\000\070\031\256\113\245\114\265\115" +
    "\236\133\242\135\237\136\257\137\240\140\247\141\260" +
    "\142\264\143\251\144\234\145\246\146\263\147\261\150" +
    "\243\151\262\152\255\153\250\154\266\155\244\156\254" +
    "\157\252\160\235\163\241\213\253\001\002\000\132\004" +
    "\140\006\106\007\011\010\034\011\053\012\061\016\126" +
    "\032\103\054\143\055\030\065\145\066\013\067\020\070" +
    "\045\071\047\072\132\073\006\074\035\104\056\105\027" +
    "\106\067\107\051\110\123\111\105\116\063\154\104\155" +
    "\066\161\141\162\014\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\071\175\036\200" +
    "\075\212\144\215\100\216\112\217\060\001\002\000\132" +
    "\004\140\006\106\007\011\010\034\011\053\012\061\016" +
    "\126\032\103\054\143\055\030\065\145\066\013\067\020" +
    "\070\045\071\047\072\132\073\006\074\035\104\056\105" +
    "\027\106\067\107\051\110\123\111\105\116\063\154\104" +
    "\155\066\161\141\162\014\164\052\165\146\166\026\167" +
    "\130\170\040\171\125\172\072\173\133\174\071\175\036" +
    "\200\075\212\144\215\100\216\112\217\060\001\002\000" +
    "\132\004\140\006\106\007\011\010\034\011\053\012\061" +
    "\016\126\032\103\054\143\055\030\065\145\066\013\067" +
    "\020\070\045\071\047\072\132\073\006\074\035\104\056" +
    "\105\027\106\067\107\051\110\123\111\105\116\063\154" +
    "\104\155\066\161\141\162\014\164\052\165\146\166\026" +
    "\167\130\170\040\171\125\172\072\173\133\174\071\175" +
    "\036\200\075\212\144\215\100\216\112\217\060\001\002" +
    "\000\132\004\140\006\106\007\011\010\034\011\053\012" +
    "\061\016\126\032\103\054\143\055\030\065\145\066\013" +
    "\067\020\070\045\071\047\072\132\073\006\074\035\104" +
    "\056\105\027\106\067\107\051\110\123\111\105\116\063" +
    "\154\104\155\066\161\141\162\014\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\071" +
    "\175\036\200\075\212\144\215\100\216\112\217\060\001" +
    "\002\000\132\004\140\006\106\007\011\010\034\011\053" +
    "\012\061\016\126\032\103\054\143\055\030\065\145\066" +
    "\013\067\020\070\045\071\047\072\132\073\006\074\035" +
    "\104\056\105\027\106\067\107\051\110\123\111\105\116" +
    "\063\154\104\155\066\161\141\162\014\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\071\175\036\200\075\212\144\215\100\216\112\217\060" +
    "\001\002\000\132\004\140\006\106\007\011\010\034\011" +
    "\053\012\061\016\126\032\103\054\143\055\030\065\145" +
    "\066\013\067\020\070\045\071\047\072\132\073\006\074" +
    "\035\104\056\105\027\106\067\107\051\110\123\111\105" +
    "\116\063\154\104\155\066\161\141\162\014\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\071\175\036\200\075\212\144\215\100\216\112\217" +
    "\060\001\002\000\132\004\140\006\106\007\011\010\034" +
    "\011\053\012\061\016\126\032\103\054\143\055\030\065" +
    "\145\066\013\067\020\070\045\071\047\072\132\073\006" +
    "\074\035\104\056\105\027\106\067\107\051\110\123\111" +
    "\105\116\063\154\104\155\066\161\141\162\014\164\052" +
    "\165\146\166\026\167\130\170\040\171\125\172\072\173" +
    "\133\174\071\175\036\200\075\212\144\215\100\216\112" +
    "\217\060\001\002\000\132\004\140\006\106\007\011\010" +
    "\034\011\053\012\061\016\126\032\103\054\143\055\030" +
    "\065\145\066\013\067\020\070\045\071\047\072\132\073" +
    "\006\074\035\104\056\105\027\106\067\107\051\110\123" +
    "\111\105\116\063\154\104\155\066\161\141\162\014\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\071\175\036\200\075\212\144\215\100\216" +
    "\112\217\060\001\002\000\132\004\140\006\106\007\011" +
    "\010\034\011\053\012\061\016\126\032\103\054\143\055" +
    "\030\065\145\066\013\067\020\070\045\071\047\072\132" +
    "\073\006\074\035\104\056\105\027\106\067\107\051\110" +
    "\123\111\105\116\063\154\104\155\066\161\141\162\014" +
    "\164\052\165\146\166\026\167\130\170\040\171\125\172" +
    "\072\173\133\174\071\175\036\200\075\212\144\215\100" +
    "\216\112\217\060\001\002\000\132\004\140\006\106\007" +
    "\011\010\034\011\053\012\061\016\126\032\103\054\143" +
    "\055\030\065\145\066\013\067\020\070\045\071\047\072" +
    "\132\073\006\074\035\104\056\105\027\106\067\107\051" +
    "\110\123\111\105\116\063\154\104\155\066\161\141\162" +
    "\014\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\071\175\036\200\075\212\144\215" +
    "\100\216\112\217\060\001\002\000\132\004\140\006\106" +
    "\007\011\010\034\011\053\012\061\016\126\032\103\054" +
    "\143\055\030\065\145\066\013\067\020\070\045\071\047" +
    "\072\132\073\006\074\035\104\056\105\027\106\067\107" +
    "\051\110\123\111\105\116\063\154\104\155\066\161\141" +
    "\162\014\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\071\175\036\200\075\212\144" +
    "\215\100\216\112\217\060\001\002\000\132\004\140\006" +
    "\106\007\011\010\034\011\053\012\061\016\126\032\103" +
    "\054\143\055\030\065\145\066\013\067\020\070\045\071" +
    "\047\072\132\073\006\074\035\104\056\105\027\106\067" +
    "\107\051\110\123\111\105\116\063\154\104\155\066\161" +
    "\141\162\014\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\071\175\036\200\075\212" +
    "\144\215\100\216\112\217\060\001\002\000\132\004\140" +
    "\006\106\007\011\010\034\011\053\012\061\016\126\032" +
    "\103\054\143\055\030\065\145\066\013\067\020\070\045" +
    "\071\047\072\132\073\006\074\035\104\056\105\027\106" +
    "\067\107\051\110\123\111\105\116\063\154\104\155\066" +
    "\161\141\162\014\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\071\175\036\200\075" +
    "\212\144\215\100\216\112\217\060\001\002\000\132\004" +
    "\140\006\106\007\011\010\034\011\053\012\061\016\126" +
    "\032\103\054\143\055\030\065\145\066\013\067\020\070" +
    "\045\071\047\072\132\073\006\074\035\104\056\105\027" +
    "\106\067\107\051\110\123\111\105\116\063\154\104\155" +
    "\066\161\141\162\014\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\071\175\036\200" +
    "\075\212\144\215\100\216\112\217\060\001\002\000\132" +
    "\004\140\006\106\007\011\010\034\011\053\012\061\016" +
    "\126\032\103\054\143\055\030\065\145\066\013\067\020" +
    "\070\045\071\047\072\132\073\006\074\035\104\056\105" +
    "\027\106\067\107\051\110\123\111\105\116\063\154\104" +
    "\155\066\161\141\162\014\164\052\165\146\166\026\167" +
    "\130\170\040\171\125\172\072\173\133\174\071\175\036" +
    "\200\075\212\144\215\100\216\112\217\060\001\002\000" +
    "\210\003\115\004\140\005\151\006\106\007\011\010\034" +
    "\011\053\012\061\014\074\016\126\017\121\020\117\021" +
    "\044\023\033\025\101\027\152\032\103\034\127\040\055" +
    "\041\120\044\134\045\041\047\147\050\025\051\012\053" +
    "\076\054\143\055\030\065\145\066\013\067\020\070\045" +
    "\071\047\072\132\073\006\074\035\100\064\103\024\104" +
    "\056\105\027\106\067\107\051\110\123\111\105\116\063" +
    "\134\010\154\104\155\066\161\141\162\014\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\071\175\036\200\075\204\042\212\144\214\354\215" +
    "\100\216\112\217\060\001\002\000\132\004\140\006\106" +
    "\007\011\010\034\011\053\012\061\016\126\032\103\054" +
    "\143\055\030\065\145\066\013\067\020\070\045\071\047" +
    "\072\132\073\006\074\035\104\056\105\027\106\067\107" +
    "\051\110\123\111\105\116\063\154\104\155\066\161\141" +
    "\162\014\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\071\175\036\200\075\212\144" +
    "\215\100\216\112\217\060\001\002\000\132\004\140\006" +
    "\106\007\011\010\034\011\053\012\061\016\126\032\103" +
    "\054\143\055\030\065\145\066\013\067\020\070\045\071" +
    "\047\072\132\073\006\074\035\104\056\105\027\106\067" +
    "\107\051\110\123\111\105\116\063\154\104\155\066\161" +
    "\141\162\014\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\071\175\036\200\075\212" +
    "\144\215\100\216\112\217\060\001\002\000\010\010\304" +
    "\012\061\215\100\001\002\000\132\004\140\006\106\007" +
    "\011\010\034\011\053\012\061\016\126\032\103\054\143" +
    "\055\030\065\145\066\013\067\020\070\045\071\047\072" +
    "\132\073\006\074\035\104\056\105\027\106\067\107\051" +
    "\110\123\111\105\116\063\154\104\155\066\161\141\162" +
    "\014\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\071\175\036\200\075\212\144\215" +
    "\100\216\112\217\060\001\002\000\132\004\140\006\106" +
    "\007\011\010\034\011\053\012\061\016\126\032\103\054" +
    "\143\055\030\065\145\066\013\067\020\070\045\071\047" +
    "\072\132\073\006\074\035\104\056\105\027\106\067\107" +
    "\051\110\123\111\105\116\063\154\104\155\066\161\141" +
    "\162\014\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\071\175\036\200\075\212\144" +
    "\215\100\216\112\217\060\001\002\000\132\004\140\006" +
    "\106\007\011\010\034\011\053\012\061\016\126\032\103" +
    "\054\143\055\030\065\145\066\013\067\020\070\045\071" +
    "\047\072\132\073\006\074\035\104\056\105\027\106\067" +
    "\107\051\110\123\111\105\116\063\154\104\155\066\161" +
    "\141\162\014\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\071\175\036\200\075\212" +
    "\144\215\100\216\112\217\060\001\002\000\132\004\140" +
    "\006\106\007\011\010\034\011\053\012\061\016\126\032" +
    "\103\054\143\055\030\065\145\066\013\067\020\070\045" +
    "\071\047\072\132\073\006\074\035\104\056\105\027\106" +
    "\067\107\051\110\123\111\105\116\063\154\104\155\066" +
    "\161\141\162\014\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\071\175\036\200\075" +
    "\212\144\215\100\216\112\217\060\001\002\000\132\004" +
    "\140\006\106\007\011\010\034\011\053\012\061\016\126" +
    "\032\103\054\143\055\030\065\145\066\013\067\020\070" +
    "\045\071\047\072\132\073\006\074\035\104\056\105\027" +
    "\106\067\107\051\110\123\111\105\116\063\154\104\155" +
    "\066\161\141\162\014\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\071\175\036\200" +
    "\075\212\144\215\100\216\112\217\060\001\002\000\132" +
    "\004\140\006\106\007\011\010\034\011\053\012\061\016" +
    "\126\032\103\054\143\055\030\065\145\066\013\067\020" +
    "\070\045\071\047\072\132\073\006\074\035\104\056\105" +
    "\027\106\067\107\051\110\123\111\105\116\063\154\104" +
    "\155\066\161\141\162\014\164\052\165\146\166\026\167" +
    "\130\170\040\171\125\172\072\173\133\174\071\175\036" +
    "\200\075\212\144\215\100\216\112\217\060\001\002\000" +
    "\132\004\140\006\106\007\011\010\034\011\053\012\061" +
    "\016\126\032\103\054\143\055\030\065\145\066\013\067" +
    "\020\070\045\071\047\072\132\073\006\074\035\104\056" +
    "\105\027\106\067\107\051\110\123\111\105\116\063\154" +
    "\104\155\066\161\141\162\014\164\052\165\146\166\026" +
    "\167\130\170\040\171\125\172\072\173\133\174\071\175" +
    "\036\200\075\212\144\215\100\216\112\217\060\001\002" +
    "\000\132\004\140\006\106\007\011\010\034\011\053\012" +
    "\061\016\126\032\103\054\143\055\030\065\145\066\013" +
    "\067\020\070\045\071\047\072\132\073\006\074\035\104" +
    "\056\105\027\106\067\107\051\110\123\111\105\116\063" +
    "\154\104\155\066\161\141\162\014\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\071" +
    "\175\036\200\075\212\144\215\100\216\112\217\060\001" +
    "\002\000\012\031\256\156\254\157\252\160\235\001\uff3f" +
    "\000\062\031\256\115\236\133\242\135\237\136\257\137" +
    "\240\140\247\141\260\142\264\143\251\144\234\145\246" +
    "\146\263\147\261\150\243\151\262\152\255\153\250\154" +
    "\266\155\244\156\254\157\252\160\235\163\241\001\uff44" +
    "\000\034\031\256\146\263\147\261\150\243\151\262\152" +
    "\255\153\250\154\266\155\244\156\254\157\252\160\235" +
    "\163\241\001\uff32\000\024\031\256\152\255\153\250\154" +
    "\266\155\244\156\254\157\252\160\235\163\241\001\uff2f" +
    "\000\024\031\256\152\255\153\250\154\266\155\244\156" +
    "\254\157\252\160\235\163\241\001\uff2e\000\024\031\256" +
    "\152\255\153\250\154\266\155\244\156\254\157\252\160" +
    "\235\163\241\001\uff2d\000\044\031\256\142\264\143\251" +
    "\144\234\145\246\146\263\147\261\150\243\151\262\152" +
    "\255\153\250\154\266\155\244\156\254\157\252\160\235" +
    "\163\241\001\uff42\000\052\031\256\137\240\140\247\141" +
    "\260\142\264\143\251\144\234\145\246\146\263\147\261" +
    "\150\243\151\262\152\255\153\250\154\266\155\244\156" +
    "\254\157\252\160\235\163\241\001\uff47\000\002\001\uff2c" +
    "\000\004\063\327\001\uff13\000\002\001\uff15\000\006\012" +
    "\061\215\322\001\002\000\004\102\315\001\002\000\004" +
    "\102\uff17\001\uff16\000\006\100\306\176\307\001\ufedc\000" +
    "\132\004\140\006\106\007\011\010\034\011\053\012\061" +
    "\016\126\032\103\054\143\055\030\065\145\066\013\067" +
    "\020\070\045\071\047\072\132\073\006\074\035\104\056" +
    "\105\027\106\067\107\051\110\123\111\105\116\063\154" +
    "\104\155\066\161\141\162\014\164\052\165\146\166\026" +
    "\167\130\170\040\171\125\172\072\173\133\174\071\175" +
    "\036\200\075\212\144\215\100\216\112\217\060\001\002" +
    "\000\132\004\140\006\106\007\011\010\034\011\053\012" +
    "\061\016\126\032\103\054\143\055\030\065\145\066\013" +
    "\067\020\070\045\071\047\072\132\073\006\074\035\104" +
    "\056\105\027\106\067\107\051\110\123\111\105\116\063" +
    "\154\104\155\066\161\141\162\014\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\071" +
    "\175\036\200\075\212\144\215\100\216\112\217\060\001" +
    "\ufed4\000\004\177\312\001\002\000\066\031\256\113\245" +
    "\114\265\115\236\133\242\135\237\136\257\137\240\140" +
    "\247\141\260\142\264\143\251\144\234\145\246\146\263" +
    "\147\261\150\243\151\262\152\255\153\250\154\266\155" +
    "\244\156\254\157\252\160\235\163\241\001\ufed3\000\002" +
    "\001\ufed9\000\070\031\256\101\314\113\245\114\265\115" +
    "\236\133\242\135\237\136\257\137\240\140\247\141\260" +
    "\142\264\143\251\144\234\145\246\146\263\147\261\150" +
    "\243\151\262\152\255\153\250\154\266\155\244\156\254" +
    "\157\252\160\235\163\241\001\002\000\002\001\ufed8\000" +
    "\006\012\061\215\100\001\002\000\002\001\ufedf\000\006" +
    "\012\061\215\322\001\002\000\006\100\306\176\307\001" +
    "\ufee1\000\006\100\306\176\307\001\ufee0\000\004\100\323" +
    "\001\ufeca\000\132\004\140\006\106\007\011\010\034\011" +
    "\053\012\061\016\126\032\103\054\143\055\030\065\145" +
    "\066\013\067\020\070\045\071\047\072\132\073\006\074" +
    "\035\104\056\105\027\106\067\107\051\110\123\111\105" +
    "\116\063\154\104\155\066\161\141\162\014\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\071\175\036\200\075\212\144\215\100\216\112\217" +
    "\060\001\002\000\070\031\256\101\325\113\245\114\265" +
    "\115\236\133\242\135\237\136\257\137\240\140\247\141" +
    "\260\142\264\143\251\144\234\145\246\146\263\147\261" +
    "\150\243\151\262\152\255\153\250\154\266\155\244\156" +
    "\254\157\252\160\235\163\241\001\002\000\002\001\ufed5" +
    "\000\006\100\306\176\307\001\ufedb\000\014\010\156\012" +
    "\061\100\335\104\056\215\100\001\002\000\002\001\ufecd" +
    "\000\002\001\ufece\000\002\001\ufed1\000\002\001\uff11\000" +
    "\006\100\340\176\341\001\ufed2\000\132\004\140\006\106" +
    "\007\011\010\034\011\053\012\061\016\126\032\103\054" +
    "\143\055\030\065\145\066\013\067\020\070\045\071\047" +
    "\072\132\073\006\074\035\104\056\105\027\106\067\107" +
    "\051\110\123\111\105\116\063\154\104\155\066\161\141" +
    "\162\014\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\071\175\036\200\075\212\144" +
    "\215\100\216\112\217\060\001\002\000\070\031\256\101" +
    "\337\113\245\114\265\115\236\133\242\135\237\136\257" +
    "\137\240\140\247\141\260\142\264\143\251\144\234\145" +
    "\246\146\263\147\261\150\243\151\262\152\255\153\250" +
    "\154\266\155\244\156\254\157\252\160\235\163\241\001" +
    "\002\000\002\001\ufecc\000\132\004\140\006\106\007\011" +
    "\010\034\011\053\012\061\016\126\032\103\054\143\055" +
    "\030\065\145\066\013\067\020\070\045\071\047\072\132" +
    "\073\006\074\035\104\056\105\027\106\067\107\051\110" +
    "\123\111\105\116\063\154\104\155\066\161\141\162\014" +
    "\164\052\165\146\166\026\167\130\170\040\171\125\172" +
    "\072\173\133\174\071\175\036\200\075\212\144\215\100" +
    "\216\112\217\060\001\002\000\132\004\140\006\106\007" +
    "\011\010\034\011\053\012\061\016\126\032\103\054\143" +
    "\055\030\065\145\066\013\067\020\070\045\071\047\072" +
    "\132\073\006\074\035\104\056\105\027\106\067\107\051" +
    "\110\123\111\105\116\063\154\104\155\066\161\141\162" +
    "\014\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\071\175\036\200\075\212\144\215" +
    "\100\216\112\217\060\001\ufed4\000\004\177\343\001\002" +
    "\000\002\001\ufed0\000\070\031\256\101\345\113\245\114" +
    "\265\115\236\133\242\135\237\136\257\137\240\140\247" +
    "\141\260\142\264\143\251\144\234\145\246\146\263\147" +
    "\261\150\243\151\262\152\255\153\250\154\266\155\244" +
    "\156\254\157\252\160\235\163\241\001\002\000\002\001" +
    "\ufecf\000\004\063\350\001\uff14\000\002\001\uff12\000\014" +
    "\010\156\012\061\100\335\104\056\215\100\001\002\000" +
    "\002\001\uff10\000\020\031\256\154\266\155\244\156\254" +
    "\157\252\160\235\163\241\001\uff3a\000\004\031\256\001" +
    "\uff3d\000\002\001\ufff8\000\002\001\uffa1\000\006\202\361" +
    "\203\360\001\uff9d\000\002\001\ufff1\000\206\003\115\004" +
    "\140\005\151\006\106\007\011\010\034\011\053\012\061" +
    "\014\074\016\126\017\121\020\117\021\044\023\033\025" +
    "\101\027\152\032\103\034\127\040\055\041\120\044\134" +
    "\045\041\047\147\050\025\051\012\053\076\054\143\055" +
    "\030\065\145\066\013\067\020\070\045\071\047\072\132" +
    "\073\006\074\035\100\064\103\024\104\056\105\027\106" +
    "\067\107\051\110\123\111\105\116\063\134\010\154\104" +
    "\155\066\161\141\162\014\164\052\165\146\166\026\167" +
    "\130\170\040\171\125\172\072\173\133\174\071\175\036" +
    "\200\075\204\042\212\144\215\100\216\112\217\060\001" +
    "\002\000\004\212\362\001\002\000\132\004\140\006\106" +
    "\007\011\010\034\011\053\012\061\016\126\032\103\054" +
    "\143\055\030\065\145\066\013\067\020\070\045\071\047" +
    "\072\132\073\006\074\035\104\056\105\027\106\067\107" +
    "\051\110\123\111\105\116\063\154\104\155\066\161\141" +
    "\162\014\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\071\175\036\200\075\212\144" +
    "\215\100\216\112\217\060\001\002\000\070\031\256\113" +
    "\245\114\265\115\236\133\242\135\237\136\257\137\240" +
    "\140\247\141\260\142\264\143\251\144\234\145\246\146" +
    "\263\147\261\150\243\151\262\152\255\153\250\154\266" +
    "\155\244\156\254\157\252\160\235\163\241\213\364\001" +
    "\002\000\206\003\115\004\140\005\151\006\106\007\011" +
    "\010\034\011\053\012\061\014\074\016\126\017\121\020" +
    "\117\021\044\023\033\025\101\027\152\032\103\034\127" +
    "\040\055\041\120\044\134\045\041\047\147\050\025\051" +
    "\012\053\076\054\143\055\030\065\145\066\013\067\020" +
    "\070\045\071\047\072\132\073\006\074\035\100\064\103" +
    "\024\104\056\105\027\106\067\107\051\110\123\111\105" +
    "\116\063\134\010\154\104\155\066\161\141\162\014\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\071\175\036\200\075\204\042\212\144\215" +
    "\100\216\112\217\060\001\002\000\002\001\uffa0\000\002" +
    "\001\uff9c\000\222\003\115\004\140\005\151\006\106\007" +
    "\011\010\034\011\053\012\061\014\074\016\126\017\121" +
    "\020\117\021\044\023\033\025\101\027\152\032\103\034" +
    "\127\040\055\041\120\042\107\044\134\045\041\047\147" +
    "\050\025\051\012\053\076\054\143\055\030\056\222\057" +
    "\032\060\137\065\145\066\013\067\020\070\045\071\047" +
    "\072\132\073\006\074\035\100\064\103\024\104\056\105" +
    "\027\106\067\107\051\110\123\111\105\116\063\134\010" +
    "\154\104\155\066\161\141\162\014\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\071" +
    "\175\036\200\075\204\042\205\062\206\017\212\144\215" +
    "\100\216\112\217\060\001\uff9f\000\006\202\373\203\372" +
    "\001\uff9b\000\004\201\u0103\001\002\000\004\214\u0101\001" +
    "\002\000\004\212\374\001\002\000\132\004\140\006\106" +
    "\007\011\010\034\011\053\012\061\016\126\032\103\054" +
    "\143\055\030\065\145\066\013\067\020\070\045\071\047" +
    "\072\132\073\006\074\035\104\056\105\027\106\067\107" +
    "\051\110\123\111\105\116\063\154\104\155\066\161\141" +
    "\162\014\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\071\175\036\200\075\212\144" +
    "\215\100\216\112\217\060\001\002\000\070\031\256\113" +
    "\245\114\265\115\236\133\242\135\237\136\257\137\240" +
    "\140\247\141\260\142\264\143\251\144\234\145\246\146" +
    "\263\147\261\150\243\151\262\152\255\153\250\154\266" +
    "\155\244\156\254\157\252\160\235\163\241\213\376\001" +
    "\002\000\004\214\377\001\002\000\002\001\ufff8\000\222" +
    "\003\115\004\140\005\151\006\106\007\011\010\034\011" +
    "\053\012\061\014\074\016\126\017\121\020\117\021\044" +
    "\023\033\025\101\027\152\032\103\034\127\040\055\041" +
    "\120\042\107\044\134\045\041\047\147\050\025\051\012" +
    "\053\076\054\143\055\030\056\222\057\032\060\137\065" +
    "\145\066\013\067\020\070\045\071\047\072\132\073\006" +
    "\074\035\100\064\103\024\104\056\105\027\106\067\107" +
    "\051\110\123\111\105\116\063\134\010\154\104\155\066" +
    "\161\141\162\014\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\071\175\036\200\075" +
    "\204\042\205\062\206\017\212\144\215\100\216\112\217" +
    "\060\001\uff9e\000\002\001\ufff8\000\222\003\115\004\140" +
    "\005\151\006\106\007\011\010\034\011\053\012\061\014" +
    "\074\016\126\017\121\020\117\021\044\023\033\025\101" +
    "\027\152\032\103\034\127\040\055\041\120\042\107\044" +
    "\134\045\041\047\147\050\025\051\012\053\076\054\143" +
    "\055\030\056\222\057\032\060\137\065\145\066\013\067" +
    "\020\070\045\071\047\072\132\073\006\074\035\100\064" +
    "\103\024\104\056\105\027\106\067\107\051\110\123\111" +
    "\105\116\063\134\010\154\104\155\066\161\141\162\014" +
    "\164\052\165\146\166\026\167\130\170\040\171\125\172" +
    "\072\173\133\174\071\175\036\200\075\204\042\205\062" +
    "\206\017\212\144\215\100\216\112\217\060\001\uff9a\000" +
    "\004\134\u0104\001\002\000\002\001\ufff0\000\004\031\256" +
    "\001\uff3c\000\034\031\256\146\263\147\261\150\243\151" +
    "\262\152\255\153\250\154\266\155\244\156\254\157\252" +
    "\160\235\163\241\001\uff31\000\020\031\256\154\266\155" +
    "\244\156\254\157\252\160\235\163\241\001\uff39\000\046" +
    "\031\256\141\260\142\264\143\251\144\234\145\246\146" +
    "\263\147\261\150\243\151\262\152\255\153\250\154\266" +
    "\155\244\156\254\157\252\160\235\163\241\001\uff41\000" +
    "\034\031\256\146\263\147\261\150\243\151\262\152\255" +
    "\153\250\154\266\155\244\156\254\157\252\160\235\163" +
    "\241\001\uff33\000\064\031\256\114\265\115\236\133\242" +
    "\135\237\136\257\137\240\140\247\141\260\142\264\143" +
    "\251\144\234\145\246\146\263\147\261\150\243\151\262" +
    "\152\255\153\250\154\266\155\244\156\254\157\252\160" +
    "\235\163\241\001\uff46\000\012\031\256\156\254\157\252" +
    "\160\235\001\uff3e\000\024\031\256\152\255\153\250\154" +
    "\266\155\244\156\254\157\252\160\235\163\241\001\uff30" +
    "\000\070\031\256\113\245\114\265\115\236\133\242\135" +
    "\237\136\257\137\240\140\247\141\260\142\264\143\251" +
    "\144\234\145\246\146\263\147\261\150\243\151\262\152" +
    "\255\153\250\154\266\155\244\156\254\157\252\160\235" +
    "\163\241\214\u010e\001\002\000\132\004\140\006\106\007" +
    "\011\010\034\011\053\012\061\016\126\032\103\054\143" +
    "\055\030\065\145\066\013\067\020\070\045\071\047\072" +
    "\132\073\006\074\035\104\056\105\027\106\067\107\051" +
    "\110\123\111\105\116\063\154\104\155\066\161\141\162" +
    "\014\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\071\175\036\200\075\212\144\215" +
    "\100\216\112\217\060\001\002\000\066\031\256\113\245" +
    "\114\265\115\236\133\242\135\237\136\257\137\240\140" +
    "\247\141\260\142\264\143\251\144\234\145\246\146\263" +
    "\147\261\150\243\151\262\152\255\153\250\154\266\155" +
    "\244\156\254\157\252\160\235\163\241\001\uff2a\000\012" +
    "\031\256\156\254\157\252\160\235\001\uff40\000\050\031" +
    "\256\140\247\141\260\142\264\143\251\144\234\145\246" +
    "\146\263\147\261\150\243\151\262\152\255\153\250\154" +
    "\266\155\244\156\254\157\252\160\235\163\241\001\uff43" +
    "\000\054\031\256\136\257\137\240\140\247\141\260\142" +
    "\264\143\251\144\234\145\246\146\263\147\261\150\243" +
    "\151\262\152\255\153\250\154\266\155\244\156\254\157" +
    "\252\160\235\163\241\001\uff48\000\060\031\256\133\242" +
    "\135\237\136\257\137\240\140\247\141\260\142\264\143" +
    "\251\144\234\145\246\146\263\147\261\150\243\151\262" +
    "\152\255\153\250\154\266\155\244\156\254\157\252\160" +
    "\235\163\241\001\uff45\000\004\031\256\001\uff3b\000\034" +
    "\031\256\146\263\147\261\150\243\151\262\152\255\153" +
    "\250\154\266\155\244\156\254\157\252\160\235\163\241" +
    "\001\uff34\000\070\031\256\113\245\114\265\115\236\133" +
    "\242\134\u0117\135\237\136\257\137\240\140\247\141\260" +
    "\142\264\143\251\144\234\145\246\146\263\147\261\150" +
    "\243\151\262\152\255\153\250\154\266\155\244\156\254" +
    "\157\252\160\235\163\241\001\002\000\002\001\uffd8\000" +
    "\004\212\u0151\001\002\000\002\001\ufee9\000\002\001\uff49" +
    "\000\004\102\u011c\001\002\000\010\010\u011e\012\061\215" +
    "\100\001\002\000\004\212\u014e\001\ufedf\000\004\212\u011f" +
    "\001\002\000\134\004\140\006\106\007\011\010\034\011" +
    "\053\012\061\016\126\032\103\054\143\055\030\065\145" +
    "\066\013\067\020\070\045\071\047\072\132\073\006\074" +
    "\035\104\056\105\027\106\067\107\051\110\123\111\105" +
    "\116\063\141\u0123\154\104\155\066\161\141\162\014\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\071\175\036\200\075\212\144\215\100\216" +
    "\112\217\060\001\uff8d\000\004\112\u0149\001\uff8e\000\042" +
    "\112\uff8b\117\u012a\120\u012d\121\u012b\122\u0134\123\u012e\124" +
    "\u0133\125\u0130\126\u0132\127\u012c\130\u0129\131\u012f\132\u0131" +
    "\164\ufee9\165\ufee9\213\uff8b\001\ufeeb\000\004\213\u0128\001" +
    "\002\000\012\010\034\012\061\104\056\215\100\001\002" +
    "\000\066\031\256\113\245\114\265\115\236\133\242\135" +
    "\237\136\257\137\240\140\247\141\260\142\264\143\251" +
    "\144\234\145\246\146\263\147\261\150\243\151\262\152" +
    "\255\153\250\154\266\155\244\156\254\157\252\160\235" +
    "\163\241\001\002\000\006\112\uff8c\213\uff8c\001\ufeec\000" +
    "\002\001\uff8a\000\002\001\ufeea\000\002\001\uff1a\000\132" +
    "\004\140\006\106\007\011\010\034\011\053\012\061\016" +
    "\126\032\103\054\143\055\030\065\145\066\013\067\020" +
    "\070\045\071\047\072\132\073\006\074\035\104\056\105" +
    "\027\106\067\107\051\110\123\111\105\116\063\154\104" +
    "\155\066\161\141\162\014\164\052\165\146\166\026\167" +
    "\130\170\040\171\125\172\072\173\133\174\071\175\036" +
    "\200\075\212\144\215\100\216\112\217\060\001\002\000" +
    "\134\004\140\006\106\007\011\010\034\011\053\012\061" +
    "\016\126\032\103\054\143\055\030\065\145\066\013\067" +
    "\020\070\045\071\047\072\132\073\006\074\035\104\056" +
    "\105\027\106\067\107\051\110\123\111\105\116\063\141" +
    "\u013f\154\104\155\066\161\141\162\014\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\071\175\036\200\075\212\144\215\100\216\112\217\060" +
    "\001\002\000\132\004\140\006\106\007\011\010\034\011" +
    "\053\012\061\016\126\032\103\054\143\055\030\065\145" +
    "\066\013\067\020\070\045\071\047\072\132\073\006\074" +
    "\035\104\056\105\027\106\067\107\051\110\123\111\105" +
    "\116\063\154\104\155\066\161\141\162\014\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\071\175\036\200\075\212\144\215\100\216\112\217" +
    "\060\001\002\000\132\004\140\006\106\007\011\010\034" +
    "\011\053\012\061\016\126\032\103\054\143\055\030\065" +
    "\145\066\013\067\020\070\045\071\047\072\132\073\006" +
    "\074\035\104\056\105\027\106\067\107\051\110\123\111" +
    "\105\116\063\154\104\155\066\161\141\162\014\164\052" +
    "\165\146\166\026\167\130\170\040\171\125\172\072\173" +
    "\133\174\071\175\036\200\075\212\144\215\100\216\112" +
    "\217\060\001\002\000\132\004\140\006\106\007\011\010" +
    "\034\011\053\012\061\016\126\032\103\054\143\055\030" +
    "\065\145\066\013\067\020\070\045\071\047\072\132\073" +
    "\006\074\035\104\056\105\027\106\067\107\051\110\123" +
    "\111\105\116\063\154\104\155\066\161\141\162\014\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\071\175\036\200\075\212\144\215\100\216" +
    "\112\217\060\001\002\000\132\004\140\006\106\007\011" +
    "\010\034\011\053\012\061\016\126\032\103\054\143\055" +
    "\030\065\145\066\013\067\020\070\045\071\047\072\132" +
    "\073\006\074\035\104\056\105\027\106\067\107\051\110" +
    "\123\111\105\116\063\154\104\155\066\161\141\162\014" +
    "\164\052\165\146\166\026\167\130\170\040\171\125\172" +
    "\072\173\133\174\071\175\036\200\075\212\144\215\100" +
    "\216\112\217\060\001\002\000\132\004\140\006\106\007" +
    "\011\010\034\011\053\012\061\016\126\032\103\054\143" +
    "\055\030\065\145\066\013\067\020\070\045\071\047\072" +
    "\132\073\006\074\035\104\056\105\027\106\067\107\051" +
    "\110\123\111\105\116\063\154\104\155\066\161\141\162" +
    "\014\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\071\175\036\200\075\212\144\215" +
    "\100\216\112\217\060\001\002\000\132\004\140\006\106" +
    "\007\011\010\034\011\053\012\061\016\126\032\103\054" +
    "\143\055\030\065\145\066\013\067\020\070\045\071\047" +
    "\072\132\073\006\074\035\104\056\105\027\106\067\107" +
    "\051\110\123\111\105\116\063\154\104\155\066\161\141" +
    "\162\014\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\071\175\036\200\075\212\144" +
    "\215\100\216\112\217\060\001\002\000\132\004\140\006" +
    "\106\007\011\010\034\011\053\012\061\016\126\032\103" +
    "\054\143\055\030\065\145\066\013\067\020\070\045\071" +
    "\047\072\132\073\006\074\035\104\056\105\027\106\067" +
    "\107\051\110\123\111\105\116\063\154\104\155\066\161" +
    "\141\162\014\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\071\175\036\200\075\212" +
    "\144\215\100\216\112\217\060\001\002\000\132\004\140" +
    "\006\106\007\011\010\034\011\053\012\061\016\126\032" +
    "\103\054\143\055\030\065\145\066\013\067\020\070\045" +
    "\071\047\072\132\073\006\074\035\104\056\105\027\106" +
    "\067\107\051\110\123\111\105\116\063\154\104\155\066" +
    "\161\141\162\014\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\071\175\036\200\075" +
    "\212\144\215\100\216\112\217\060\001\002\000\132\004" +
    "\140\006\106\007\011\010\034\011\053\012\061\016\126" +
    "\032\103\054\143\055\030\065\145\066\013\067\020\070" +
    "\045\071\047\072\132\073\006\074\035\104\056\105\027" +
    "\106\067\107\051\110\123\111\105\116\063\154\104\155" +
    "\066\161\141\162\014\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\071\175\036\200" +
    "\075\212\144\215\100\216\112\217\060\001\002\000\132" +
    "\004\140\006\106\007\011\010\034\011\053\012\061\016" +
    "\126\032\103\054\143\055\030\065\145\066\013\067\020" +
    "\070\045\071\047\072\132\073\006\074\035\104\056\105" +
    "\027\106\067\107\051\110\123\111\105\116\063\154\104" +
    "\155\066\161\141\162\014\164\052\165\146\166\026\167" +
    "\130\170\040\171\125\172\072\173\133\174\071\175\036" +
    "\200\075\212\144\215\100\216\112\217\060\001\002\000" +
    "\060\031\256\133\242\135\237\136\257\137\240\140\247" +
    "\141\260\142\264\143\251\144\234\145\246\146\263\147" +
    "\261\150\243\151\262\152\255\153\250\154\266\155\244" +
    "\156\254\157\252\160\235\163\241\001\uff55\000\060\031" +
    "\256\133\242\135\237\136\257\137\240\140\247\141\260" +
    "\142\264\143\251\144\234\145\246\146\263\147\261\150" +
    "\243\151\262\152\255\153\250\154\266\155\244\156\254" +
    "\157\252\160\235\163\241\001\uff53\000\060\031\256\133" +
    "\242\135\237\136\257\137\240\140\247\141\260\142\264" +
    "\143\251\144\234\145\246\146\263\147\261\150\243\151" +
    "\262\152\255\153\250\154\266\155\244\156\254\157\252" +
    "\160\235\163\241\001\uff51\000\060\031\256\133\242\135" +
    "\237\136\257\137\240\140\247\141\260\142\264\143\251" +
    "\144\234\145\246\146\263\147\261\150\243\151\262\152" +
    "\255\153\250\154\266\155\244\156\254\157\252\160\235" +
    "\163\241\001\uff4d\000\060\031\256\133\242\135\237\136" +
    "\257\137\240\140\247\141\260\142\264\143\251\144\234" +
    "\145\246\146\263\147\261\150\243\151\262\152\255\153" +
    "\250\154\266\155\244\156\254\157\252\160\235\163\241" +
    "\001\uff52\000\060\031\256\133\242\135\237\136\257\137" +
    "\240\140\247\141\260\142\264\143\251\144\234\145\246" +
    "\146\263\147\261\150\243\151\262\152\255\153\250\154" +
    "\266\155\244\156\254\157\252\160\235\163\241\001\uff4e" +
    "\000\060\031\256\133\242\135\237\136\257\137\240\140" +
    "\247\141\260\142\264\143\251\144\234\145\246\146\263" +
    "\147\261\150\243\151\262\152\255\153\250\154\266\155" +
    "\244\156\254\157\252\160\235\163\241\001\uff54\000\060" +
    "\031\256\133\242\135\237\136\257\137\240\140\247\141" +
    "\260\142\264\143\251\144\234\145\246\146\263\147\261" +
    "\150\243\151\262\152\255\153\250\154\266\155\244\156" +
    "\254\157\252\160\235\163\241\001\uff57\000\060\031\256" +
    "\133\242\135\237\136\257\137\240\140\247\141\260\142" +
    "\264\143\251\144\234\145\246\146\263\147\261\150\243" +
    "\151\262\152\255\153\250\154\266\155\244\156\254\157" +
    "\252\160\235\163\241\001\uff50\000\060\031\256\133\242" +
    "\135\237\136\257\137\240\140\247\141\260\142\264\143" +
    "\251\144\234\145\246\146\263\147\261\150\243\151\262" +
    "\152\255\153\250\154\266\155\244\156\254\157\252\160" +
    "\235\163\241\001\uff56\000\014\010\034\012\061\104\056" +
    "\200\u0141\215\100\001\002\000\060\031\256\133\242\135" +
    "\237\136\257\137\240\140\247\141\260\142\264\143\251" +
    "\144\234\145\246\146\263\147\261\150\243\151\262\152" +
    "\255\153\250\154\266\155\244\156\254\157\252\160\235" +
    "\163\241\001\uff5c\000\010\010\304\012\061\215\100\001" +
    "\002\000\002\001\uff5b\000\004\212\u0145\001\uff0c\000\002" +
    "\001\uff5a\000\134\004\140\006\106\007\011\010\034\011" +
    "\053\012\061\016\126\032\103\054\143\055\030\065\145" +
    "\066\013\067\020\070\045\071\047\072\132\073\006\074" +
    "\035\104\056\105\027\106\067\107\051\110\123\111\105" +
    "\116\063\141\u0123\154\104\155\066\161\141\162\014\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\071\175\036\200\075\212\144\215\100\216" +
    "\112\217\060\001\uff8d\000\004\213\u0147\001\002\000\002" +
    "\001\uff0b\000\060\031\256\133\242\135\237\136\257\137" +
    "\240\140\247\141\260\142\264\143\251\144\234\145\246" +
    "\146\263\147\261\150\243\151\262\152\255\153\250\154" +
    "\266\155\244\156\254\157\252\160\235\163\241\001\uff4f" +
    "\000\134\004\140\006\106\007\011\010\034\011\053\012" +
    "\061\016\126\032\103\054\143\055\030\065\145\066\013" +
    "\067\020\070\045\071\047\072\132\073\006\074\035\104" +
    "\056\105\027\106\067\107\051\110\123\111\105\116\063" +
    "\141\u014b\154\104\155\066\161\141\162\014\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\071\175\036\200\075\212\144\215\100\216\112\217" +
    "\060\001\002\000\042\112\uff88\117\u012a\120\u012d\121\u012b" +
    "\122\u0134\123\u012e\124\u0133\125\u0130\126\u0132\127\u012c\130" +
    "\u0129\131\u012f\132\u0131\164\ufee9\165\ufee9\213\uff88\001\ufeeb" +
    "\000\012\010\034\012\061\104\056\215\100\001\002\000" +
    "\006\112\uff89\213\uff89\001\ufeec\000\002\001\uff87\000\134" +
    "\004\140\006\106\007\011\010\034\011\053\012\061\016" +
    "\126\032\103\054\143\055\030\065\145\066\013\067\020" +
    "\070\045\071\047\072\132\073\006\074\035\104\056\105" +
    "\027\106\067\107\051\110\123\111\105\116\063\141\u0123" +
    "\154\104\155\066\161\141\162\014\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\071" +
    "\175\036\200\075\212\144\215\100\216\112\217\060\001" +
    "\uff8d\000\004\213\u0150\001\002\000\002\001\uff19\000\134" +
    "\004\140\006\106\007\011\010\034\011\053\012\061\016" +
    "\126\032\103\054\143\055\030\065\145\066\013\067\020" +
    "\070\045\071\047\072\132\073\006\074\035\104\056\105" +
    "\027\106\067\107\051\110\123\111\105\116\063\141\u0123" +
    "\154\104\155\066\161\141\162\014\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\071" +
    "\175\036\200\075\212\144\215\100\216\112\217\060\001" +
    "\uff8d\000\004\213\u0153\001\002\000\002\001\uff1b\000\014" +
    "\010\034\012\061\065\u0158\104\056\215\100\001\ufec5\000" +
    "\006\112\u015c\213\u015e\001\002\000\002\001\ufec8\000\002" +
    "\001\ufec7\000\004\212\u0159\001\002\000\014\010\034\012" +
    "\061\065\u0158\104\056\215\100\001\ufec5\000\006\112\u015c" +
    "\213\u015b\001\002\000\002\001\ufec6\000\014\010\034\012" +
    "\061\065\u0158\104\056\215\100\001\ufec5\000\002\001\ufec9" +
    "\000\004\117\u015f\001\002\000\132\004\140\006\106\007" +
    "\011\010\034\011\053\012\061\016\126\032\103\054\143" +
    "\055\030\065\145\066\013\067\020\070\045\071\047\072" +
    "\132\073\006\074\035\104\056\105\027\106\067\107\051" +
    "\110\123\111\105\116\063\154\104\155\066\161\141\162" +
    "\014\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\071\175\036\200\075\212\144\215" +
    "\100\216\112\217\060\001\002\000\060\031\256\133\242" +
    "\135\237\136\257\137\240\140\247\141\260\142\264\143" +
    "\251\144\234\145\246\146\263\147\261\150\243\151\262" +
    "\152\255\153\250\154\266\155\244\156\254\157\252\160" +
    "\235\163\241\001\uff5d\000\070\031\256\113\245\114\265" +
    "\115\236\133\242\135\237\136\257\137\240\140\247\141" +
    "\260\142\264\143\251\144\234\145\246\146\263\147\261" +
    "\150\243\151\262\152\255\153\250\154\266\155\244\156" +
    "\254\157\252\160\235\163\241\213\u0162\001\002\000\002" +
    "\001\uff2b\000\012\010\034\012\061\104\056\215\100\001" +
    "\002\000\002\001\ufea7\000\006\112\u0167\213\u0166\001\002" +
    "\000\002\001\ufeae\000\012\010\034\012\061\104\056\215" +
    "\100\001\002\000\002\001\ufea6\000\004\031\256\001\uff36" +
    "\000\134\004\140\006\106\007\011\010\034\011\053\012" +
    "\061\016\126\032\103\054\143\055\030\065\145\066\013" +
    "\067\020\070\045\071\047\072\132\073\006\074\035\104" +
    "\056\105\027\106\067\107\051\110\123\111\105\116\063" +
    "\154\104\155\066\161\141\162\014\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\071" +
    "\175\036\200\075\212\144\213\u016d\215\100\216\112\217" +
    "\060\001\002\000\002\001\uff21\000\070\031\256\113\245" +
    "\114\265\115\236\133\242\135\237\136\257\137\240\140" +
    "\247\141\260\142\264\143\251\144\234\145\246\146\263" +
    "\147\261\150\243\151\262\152\255\153\250\154\266\155" +
    "\244\156\254\157\252\160\235\163\241\213\u016e\001\002" +
    "\000\002\001\uff0e\000\002\001\uff0d\000\002\001\uffe7\000" +
    "\040\117\u012a\120\u012d\121\u012b\122\u0134\123\u012e\124\u0133" +
    "\125\u0130\126\u0132\127\u012c\130\u0129\131\u012f\132\u0131\134" +
    "\u0173\164\ufee9\165\ufee9\001\ufeeb\000\004\134\u0172\001\ufeec" +
    "\000\002\001\uffe6\000\002\001\uffe5\000\002\001\uff23\000" +
    "\002\001\uff27\000\132\004\140\006\106\007\011\010\034" +
    "\011\053\012\061\016\126\032\103\054\143\055\030\065" +
    "\145\066\013\067\020\070\045\071\047\072\132\073\006" +
    "\074\035\104\056\105\027\106\067\107\051\110\123\111" +
    "\105\116\063\154\104\155\066\161\141\162\014\164\052" +
    "\165\146\166\026\167\130\170\040\171\125\172\072\173" +
    "\133\174\071\175\036\200\075\212\144\215\100\216\112" +
    "\217\060\001\002\000\070\031\256\113\245\114\265\115" +
    "\236\133\242\135\237\136\257\137\240\140\247\141\260" +
    "\142\264\143\251\144\234\145\246\146\263\147\261\150" +
    "\243\151\262\152\255\153\250\154\266\155\244\156\254" +
    "\157\252\160\235\163\241\213\u0178\001\002\000\006\100" +
    "\u017a\214\u017b\001\002\000\002\001\uffec\000\004\134\u018b" +
    "\001\uffa8\000\004\134\u017d\001\uffa8\000\010\035\u0189\036" +
    "\u0180\037\u0181\001\002\000\002\001\uffa8\000\010\035\u017f" +
    "\036\u0180\037\u0181\001\002\000\002\001\uffa9\000\132\004" +
    "\140\006\106\007\011\010\034\011\053\012\061\016\126" +
    "\032\103\054\143\055\030\065\145\066\013\067\020\070" +
    "\045\071\047\072\132\073\006\074\035\104\056\105\027" +
    "\106\067\107\051\110\123\111\105\116\063\154\104\155" +
    "\066\161\141\162\014\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\071\175\036\200" +
    "\075\212\144\215\100\216\112\217\060\001\002\000\006" +
    "\134\u0184\214\u0183\001\002\000\002\001\ufff8\000\002\001" +
    "\uffa5\000\002\001\uffa4\000\222\003\115\004\140\005\151" +
    "\006\106\007\011\010\034\011\053\012\061\014\074\016" +
    "\126\017\121\020\117\021\044\023\033\025\101\027\152" +
    "\032\103\034\127\040\055\041\120\042\107\044\134\045" +
    "\041\047\147\050\025\051\012\053\076\054\143\055\030" +
    "\056\222\057\032\060\137\065\145\066\013\067\020\070" +
    "\045\071\047\072\132\073\006\074\035\100\064\103\024" +
    "\104\056\105\027\106\067\107\051\110\123\111\105\116" +
    "\063\134\010\154\104\155\066\161\141\162\014\164\052" +
    "\165\146\166\026\167\130\170\040\171\125\172\072\173" +
    "\133\174\071\175\036\200\075\204\042\205\062\206\017" +
    "\212\144\215\100\216\112\217\060\001\uffa6\000\072\031" +
    "\256\113\245\114\265\115\236\133\242\134\u0184\135\237" +
    "\136\257\137\240\140\247\141\260\142\264\143\251\144" +
    "\234\145\246\146\263\147\261\150\243\151\262\152\255" +
    "\153\250\154\266\155\244\156\254\157\252\160\235\163" +
    "\241\214\u0183\001\002\000\002\001\ufff8\000\222\003\115" +
    "\004\140\005\151\006\106\007\011\010\034\011\053\012" +
    "\061\014\074\016\126\017\121\020\117\021\044\023\033" +
    "\025\101\027\152\032\103\034\127\040\055\041\120\042" +
    "\107\044\134\045\041\047\147\050\025\051\012\053\076" +
    "\054\143\055\030\056\222\057\032\060\137\065\145\066" +
    "\013\067\020\070\045\071\047\072\132\073\006\074\035" +
    "\100\064\103\024\104\056\105\027\106\067\107\051\110" +
    "\123\111\105\116\063\134\010\154\104\155\066\161\141" +
    "\162\014\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\071\175\036\200\075\204\042" +
    "\205\062\206\017\212\144\215\100\216\112\217\060\001" +
    "\uffa7\000\002\001\uffaa\000\010\036\u0180\037\u0181\101\u018e" +
    "\001\002\000\002\001\uffa8\000\010\036\u0180\037\u0181\101" +
    "\u018d\001\002\000\002\001\uffab\000\002\001\uffac\000\002" +
    "\001\uff25\000\066\031\256\113\245\114\265\115\236\133" +
    "\242\135\237\136\257\137\240\140\247\141\260\142\264" +
    "\143\251\144\234\145\246\146\263\147\261\150\243\151" +
    "\262\152\255\153\250\154\266\155\244\156\254\157\252" +
    "\160\235\163\241\001\ufea9\000\006\112\u0193\134\u0194\001" +
    "\002\000\066\031\256\113\245\114\265\115\236\133\242" +
    "\135\237\136\257\137\240\140\247\141\260\142\264\143" +
    "\251\144\234\145\246\146\263\147\261\150\243\151\262" +
    "\152\255\153\250\154\266\155\244\156\254\157\252\160" +
    "\235\163\241\001\uff62\000\132\004\140\006\106\007\011" +
    "\010\034\011\053\012\061\016\126\032\103\054\143\055" +
    "\030\065\145\066\013\067\020\070\045\071\047\072\132" +
    "\073\006\074\035\104\056\105\027\106\067\107\051\110" +
    "\123\111\105\116\063\154\104\155\066\161\141\162\014" +
    "\164\052\165\146\166\026\167\130\170\040\171\125\172" +
    "\072\173\133\174\071\175\036\200\075\212\144\215\100" +
    "\216\112\217\060\001\002\000\002\001\uffe2\000\066\031" +
    "\256\113\245\114\265\115\236\133\242\135\237\136\257" +
    "\137\240\140\247\141\260\142\264\143\251\144\234\145" +
    "\246\146\263\147\261\150\243\151\262\152\255\153\250" +
    "\154\266\155\244\156\254\157\252\160\235\163\241\001" +
    "\uff63\000\002\001\uffe9\000\070\031\256\113\245\114\265" +
    "\115\236\133\242\134\u0198\135\237\136\257\137\240\140" +
    "\247\141\260\142\264\143\251\144\234\145\246\146\263" +
    "\147\261\150\243\151\262\152\255\153\250\154\266\155" +
    "\244\156\254\157\252\160\235\163\241\001\002\000\002" +
    "\001\uffe8\000\004\021\u019a\001\002\000\004\212\u019b\001" +
    "\002\000\132\004\140\006\106\007\011\010\034\011\053" +
    "\012\061\016\126\032\103\054\143\055\030\065\145\066" +
    "\013\067\020\070\045\071\047\072\132\073\006\074\035" +
    "\104\056\105\027\106\067\107\051\110\123\111\105\116" +
    "\063\154\104\155\066\161\141\162\014\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\071\175\036\200\075\212\144\215\100\216\112\217\060" +
    "\001\002\000\070\031\256\113\245\114\265\115\236\133" +
    "\242\135\237\136\257\137\240\140\247\141\260\142\264" +
    "\143\251\144\234\145\246\146\263\147\261\150\243\151" +
    "\262\152\255\153\250\154\266\155\244\156\254\157\252" +
    "\160\235\163\241\213\u019d\001\002\000\004\134\u019e\001" +
    "\002\000\002\001\uffee\000\004\061\u01a1\001\uffbe\000\004" +
    "\100\u01a7\001\002\000\004\010\u01a4\001\002\000\004\112" +
    "\u01a5\001\uffbd\000\002\001\uffba\000\002\001\uff17\000\004" +
    "\010\u01a4\001\002\000\002\001\uffb9\000\002\001\uff7c\000" +
    "\026\043\u01b4\052\u01ab\101\u01b1\103\u01b8\204\u01ad\205\u01b0" +
    "\206\u01b3\207\u01b6\210\u01ac\211\u01af\001\uff73\000\002\001" +
    "\uff7d\000\006\112\u01e1\134\u01e2\001\002\000\002\001\uff74" +
    "\000\002\001\uff6e\000\002\001\uff6c\000\002\001\uff71\000" +
    "\002\001\uff6f\000\002\001\uff6b\000\002\001\uffc5\000\004" +
    "\012\u01d8\001\002\000\002\001\uff6a\000\004\010\u01d5\001" +
    "\002\000\020\042\uff72\204\u01ad\205\u01b0\206\u01b3\207\u01b6" +
    "\210\u01ac\211\u01af\001\uff75\000\002\001\uff6d\000\004\042" +
    "\u01ba\001\002\000\206\003\115\004\140\005\151\006\106" +
    "\007\011\010\034\011\053\012\061\014\074\016\126\017" +
    "\121\020\117\021\044\023\033\025\101\027\152\032\103" +
    "\034\127\040\055\041\120\044\134\045\041\047\147\050" +
    "\025\051\012\053\076\054\143\055\030\065\145\066\013" +
    "\067\020\070\045\071\047\072\132\073\006\074\035\100" +
    "\064\103\024\104\056\105\027\106\067\107\051\110\123" +
    "\111\105\116\063\134\010\154\104\155\066\161\141\162" +
    "\014\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\071\175\036\200\075\204\042\212" +
    "\144\215\100\216\112\217\060\001\002\000\002\001\uff78" +
    "\000\004\141\u01bc\001\uffc9\000\006\010\156\104\056\001" +
    "\002\000\002\001\uffc8\000\004\212\u01be\001\002\000\010" +
    "\010\u01c1\066\u01bf\213\uff98\001\uff91\000\002\001\uff8f\000" +
    "\006\012\u01ce\141\u01cd\001\002\000\002\001\uff90\000\004" +
    "\213\u01c7\001\002\000\004\112\u01c5\001\uff99\000\002\001" +
    "\uff97\000\006\010\u01c1\066\u01bf\001\uff91\000\002\001\uff96" +
    "\000\006\100\u01c9\134\u01ca\001\002\000\002\001\uff79\000" +
    "\002\001\ufff8\000\002\001\uff77\000\224\003\115\004\140" +
    "\005\151\006\106\007\011\010\034\011\053\012\061\014" +
    "\074\016\126\017\121\020\117\021\044\023\033\025\101" +
    "\027\152\032\103\034\127\040\055\041\120\042\107\044" +
    "\134\045\041\047\147\050\025\051\012\053\076\054\143" +
    "\055\030\056\222\057\032\060\137\065\145\066\013\067" +
    "\020\070\045\071\047\072\132\073\006\074\035\100\064" +
    "\101\u01cc\103\024\104\056\105\027\106\067\107\051\110" +
    "\123\111\105\116\063\134\010\154\104\155\066\161\141" +
    "\162\014\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\071\175\036\200\075\204\042" +
    "\205\062\206\017\212\144\215\100\216\112\217\060\001" +
    "\002\000\002\001\uff76\000\004\012\u01d1\001\002\000\004" +
    "\117\u01cf\001\uff95\000\034\006\106\007\011\010\166\016" +
    "\126\066\162\067\020\070\045\071\047\072\132\073\006" +
    "\104\056\154\160\155\167\001\002\000\002\001\uff93\000" +
    "\004\117\u01d2\001\uff94\000\034\006\106\007\011\010\166" +
    "\016\126\066\162\067\020\070\045\071\047\072\132\073" +
    "\006\104\056\154\160\155\167\001\002\000\002\001\uff92" +
    "\000\002\001\uff70\000\004\117\u01d6\001\002\000\034\006" +
    "\106\007\011\010\166\016\126\066\162\067\020\070\045" +
    "\071\047\072\132\073\006\104\056\154\160\155\167\001" +
    "\002\000\002\001\uff64\000\004\117\u01df\001\uff67\000\006" +
    "\112\u01da\134\u01db\001\002\000\004\012\u01dc\001\002\000" +
    "\002\001\uff7b\000\004\117\u01dd\001\uff69\000\034\006\106" +
    "\007\011\010\166\016\126\066\162\067\020\070\045\071" +
    "\047\072\132\073\006\104\056\154\160\155\167\001\002" +
    "\000\002\001\uff68\000\034\006\106\007\011\010\166\016" +
    "\126\066\162\067\020\070\045\071\047\072\132\073\006" +
    "\104\056\154\160\155\167\001\002\000\002\001\uff66\000" +
    "\004\010\u01e3\001\002\000\002\001\uff7a\000\004\117\u01e4" +
    "\001\002\000\034\006\106\007\011\010\166\016\126\066" +
    "\162\067\020\070\045\071\047\072\132\073\006\104\056" +
    "\154\160\155\167\001\002\000\002\001\uff65\000\014\012" +
    "\061\015\u01ec\076\u01eb\077\u01e9\216\u01ea\001\002\000\006" +
    "\063\u01f7\176\u01f6\001\ufeb7\000\002\001\ufeba\000\012\010" +
    "\034\012\061\104\056\215\100\001\002\000\002\001\ufef7" +
    "\000\132\004\140\006\106\007\011\010\034\011\u01ed\012" +
    "\061\016\126\032\103\054\143\055\030\065\145\066\013" +
    "\067\020\070\045\071\047\072\132\073\006\074\035\104" +
    "\056\105\027\106\067\107\051\110\123\111\105\116\063" +
    "\154\104\155\066\161\141\162\014\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\071" +
    "\175\036\200\075\212\144\215\100\216\112\217\060\001" +
    "\002\000\002\001\ufeb9\000\004\176\u01f0\001\ufefa\000\070" +
    "\031\256\101\u01ef\113\245\114\265\115\236\133\242\135" +
    "\237\136\257\137\240\140\247\141\260\142\264\143\251" +
    "\144\234\145\246\146\263\147\261\150\243\151\262\152" +
    "\255\153\250\154\266\155\244\156\254\157\252\160\235" +
    "\163\241\001\002\000\002\001\ufeb4\000\132\004\140\006" +
    "\106\007\011\010\034\011\053\012\061\016\126\032\103" +
    "\054\143\055\030\065\145\066\013\067\020\070\045\071" +
    "\047\072\132\073\006\074\035\104\056\105\027\106\067" +
    "\107\051\110\123\111\105\116\063\154\104\155\066\161" +
    "\141\162\014\164\052\165\146\166\026\167\130\170\040" +
    "\171\125\172\072\173\133\174\071\175\036\200\075\212" +
    "\144\215\100\216\112\217\060\001\002\000\070\031\256" +
    "\113\245\114\265\115\236\133\242\135\237\136\257\137" +
    "\240\140\247\141\260\142\264\143\251\144\234\145\246" +
    "\146\263\147\261\150\243\151\262\152\255\153\250\154" +
    "\266\155\244\156\254\157\252\160\235\163\241\177\u01f2" +
    "\001\002\000\004\101\u01f3\001\002\000\002\001\ufeb3\000" +
    "\004\101\u01f5\001\002\000\002\001\ufeb2\000\012\010\156" +
    "\012\061\013\u01fc\104\056\001\002\000\006\010\156\104" +
    "\056\001\002\000\002\001\ufeb5\000\002\001\ufeaf\000\004" +
    "\177\u01fd\001\002\000\002\001\ufeb1\000\002\001\ufeb0\000" +
    "\002\001\ufeb6\000\006\010\156\104\056\001\002\000\004" +
    "\212\u0200\001\002\000\010\010\u01c1\066\u01bf\213\uff98\001" +
    "\uff91\000\004\213\u0202\001\002\000\004\100\u0203\001\002" +
    "\000\002\001\ufff8\000\224\003\115\004\140\005\151\006" +
    "\106\007\011\010\034\011\053\012\061\014\074\016\126" +
    "\017\121\020\117\021\044\023\033\025\101\027\152\032" +
    "\103\034\127\040\055\041\120\042\107\044\134\045\041" +
    "\047\147\050\025\051\012\053\076\054\143\055\030\056" +
    "\222\057\032\060\137\065\145\066\013\067\020\070\045" +
    "\071\047\072\132\073\006\074\035\100\064\101\u0205\103" +
    "\024\104\056\105\027\106\067\107\051\110\123\111\105" +
    "\116\063\134\010\154\104\155\066\161\141\162\014\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\071\175\036\200\075\204\042\205\062\206" +
    "\017\212\144\215\100\216\112\217\060\001\002\000\002" +
    "\001\uffc7\000\066\031\256\113\245\114\265\115\236\133" +
    "\242\135\237\136\257\137\240\140\247\141\260\142\264" +
    "\143\251\144\234\145\246\146\263\147\261\150\243\151" +
    "\262\152\255\153\250\154\266\155\244\156\254\157\252" +
    "\160\235\163\241\001\ufea8\000\012\031\256\156\254\157" +
    "\252\160\235\001\uff38\000\002\001\uff58\000\132\004\140" +
    "\006\106\007\011\010\034\011\053\012\061\016\126\032" +
    "\103\054\143\055\030\065\145\066\013\067\020\070\045" +
    "\071\047\072\132\073\006\074\035\104\056\105\027\106" +
    "\067\107\051\110\123\111\105\116\063\154\104\155\066" +
    "\161\141\162\014\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\071\175\036\200\075" +
    "\212\144\215\100\216\112\217\060\001\002\000\040\033" +
    "\u021a\117\u012a\120\u012d\121\u012b\122\u0134\123\u012e\124\u0133" +
    "\125\u0130\126\u0132\127\u012c\130\u0129\131\u012f\132\u0131\164" +
    "\ufee9\165\ufee9\001\ufeeb\000\004\033\u020c\001\ufeec\000\012" +
    "\010\034\012\061\104\056\215\100\001\002\000\004\064" +
    "\u020f\001\uffb8\000\004\213\u0214\001\002\000\014\010\034" +
    "\012\061\104\056\141\u0212\215\100\001\002\000\002\001" +
    "\uffb7\000\002\001\uffb6\000\012\010\034\012\061\104\056" +
    "\215\100\001\002\000\002\001\uffb5\000\210\003\115\004" +
    "\140\005\151\006\106\007\011\010\034\011\053\012\061" +
    "\014\074\016\126\017\121\020\117\021\044\023\033\025" +
    "\101\027\152\032\103\034\127\040\055\041\120\044\134" +
    "\045\041\047\147\050\025\051\012\053\076\054\143\055" +
    "\030\065\145\066\013\067\020\070\045\071\047\072\132" +
    "\073\006\074\035\100\064\103\024\104\056\105\027\106" +
    "\067\107\051\110\123\111\105\116\063\134\010\154\104" +
    "\155\066\161\141\162\014\164\052\165\146\166\026\167" +
    "\130\170\040\171\125\172\072\173\133\174\071\175\036" +
    "\200\075\204\042\212\144\214\u0215\215\100\216\112\217" +
    "\060\001\002\000\002\001\ufff8\000\002\001\uffb2\000\002" +
    "\001\uffdc\000\224\003\115\004\140\005\151\006\106\007" +
    "\011\010\034\011\053\012\061\014\074\016\126\017\121" +
    "\020\117\021\044\023\033\025\101\026\u0219\027\152\032" +
    "\103\034\127\040\055\041\120\042\107\044\134\045\041" +
    "\047\147\050\025\051\012\053\076\054\143\055\030\056" +
    "\222\057\032\060\137\065\145\066\013\067\020\070\045" +
    "\071\047\072\132\073\006\074\035\100\064\103\024\104" +
    "\056\105\027\106\067\107\051\110\123\111\105\116\063" +
    "\134\010\154\104\155\066\161\141\162\014\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\071\175\036\200\075\204\042\205\062\206\017\212" +
    "\144\215\100\216\112\217\060\001\002\000\002\001\uffb1" +
    "\000\014\010\034\012\061\104\056\141\u0212\215\100\001" +
    "\002\000\004\064\u020f\001\uffb8\000\004\213\u021d\001\002" +
    "\000\210\003\115\004\140\005\151\006\106\007\011\010" +
    "\034\011\053\012\061\014\074\016\126\017\121\020\117" +
    "\021\044\023\033\025\101\027\152\032\103\034\127\040" +
    "\055\041\120\044\134\045\041\047\147\050\025\051\012" +
    "\053\076\054\143\055\030\065\145\066\013\067\020\070" +
    "\045\071\047\072\132\073\006\074\035\100\064\103\024" +
    "\104\056\105\027\106\067\107\051\110\123\111\105\116" +
    "\063\134\010\154\104\155\066\161\141\162\014\164\052" +
    "\165\146\166\026\167\130\170\040\171\125\172\072\173" +
    "\133\174\071\175\036\200\075\204\042\212\144\214\u0215" +
    "\215\100\216\112\217\060\001\002\000\002\001\uffdd\000" +
    "\002\001\uff4c\000\002\001\uff4a\000\012\010\034\012\061" +
    "\104\056\215\100\001\002\000\002\001\uffd0\000\002\001" +
    "\uffce\000\006\112\u0226\213\u0225\001\002\000\004\134\u0228" +
    "\001\002\000\012\010\034\012\061\104\056\215\100\001" +
    "\002\000\002\001\uffcf\000\002\001\uffde\000\004\212\u0145" +
    "\001\uff0c\000\002\001\uff59\000\002\001\uff24\000\002\001" +
    "\uff22\000\010\100\306\176\307\212\ufee0\001\ufedb\000\066" +
    "\031\256\113\245\114\265\115\236\133\242\135\237\136" +
    "\257\137\240\140\247\141\260\142\264\143\251\144\234" +
    "\145\246\146\263\147\261\150\243\151\262\152\255\153" +
    "\250\154\266\155\244\156\254\157\252\160\235\163\241" +
    "\001\ufeab\000\012\031\256\156\254\157\252\160\235\001" +
    "\uff37\000\224\003\115\004\140\005\151\006\106\007\011" +
    "\010\034\011\053\012\061\014\074\016\126\017\121\020" +
    "\117\021\044\023\033\025\101\027\152\032\103\034\127" +
    "\040\055\041\120\042\107\044\134\045\041\047\147\050" +
    "\025\051\012\053\076\054\143\055\030\056\222\057\032" +
    "\060\137\065\145\066\013\067\020\070\045\071\047\072" +
    "\132\073\006\074\035\100\064\101\u0231\103\024\104\056" +
    "\105\027\106\067\107\051\110\123\111\105\116\063\134" +
    "\010\154\104\155\066\161\141\162\014\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\071\175\036\200\075\204\042\205\062\206\017\212\144" +
    "\215\100\216\112\217\060\001\002\000\002\001\ufff2\000" +
    "\060\031\256\133\242\135\237\136\257\137\240\140\247" +
    "\141\260\142\264\143\251\144\234\145\246\146\263\147" +
    "\261\150\243\151\262\152\255\153\250\154\266\155\244" +
    "\156\254\157\252\160\235\163\241\001\uff1c\000\002\001" +
    "\uffc3\000\014\012\061\015\u01ec\076\u01eb\077\u01e9\217\u0235" +
    "\001\002\000\002\001\uff1d\000\004\213\u0237\001\002\000" +
    "\004\134\u0238\001\002\000\002\001\ufffa\000\002\001\uffeb" +
    "\000\070\031\256\113\245\114\265\115\236\133\242\134" +
    "\u023b\135\237\136\257\137\240\140\247\141\260\142\264" +
    "\143\251\144\234\145\246\146\263\147\261\150\243\151" +
    "\262\152\255\153\250\154\266\155\244\156\254\157\252" +
    "\160\235\163\241\001\002\000\002\001\uffea\000\002\001" +
    "\uff4b\000\132\004\140\006\106\007\011\010\034\011\053" +
    "\012\061\016\126\032\103\054\143\055\030\065\145\066" +
    "\013\067\020\070\045\071\047\072\132\073\006\074\035" +
    "\104\056\105\027\106\067\107\051\110\123\111\105\116" +
    "\063\154\104\155\066\161\141\162\014\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\071\175\036\200\075\212\144\215\100\216\112\217\060" +
    "\001\002\000\070\031\256\113\245\114\265\115\236\133" +
    "\242\135\237\136\257\137\240\140\247\141\260\142\264" +
    "\143\251\144\234\145\246\146\263\147\261\150\243\151" +
    "\262\152\255\153\250\154\266\155\244\156\254\157\252" +
    "\160\235\163\241\213\u023f\001\002\000\002\001\ufeaa\000" +
    "\014\010\156\012\061\100\335\104\056\215\100\001\002" +
    "\000\004\212\u0243\001\ufee2\000\002\001\ufee5\000\134\004" +
    "\140\006\106\007\011\010\034\011\053\012\061\016\126" +
    "\032\103\054\143\055\030\065\145\066\013\067\020\070" +
    "\045\071\047\072\132\073\006\074\035\104\056\105\027" +
    "\106\067\107\051\110\123\111\105\116\063\141\u0123\154" +
    "\104\155\066\161\141\162\014\164\052\165\146\166\026" +
    "\167\130\170\040\171\125\172\072\173\133\174\071\175" +
    "\036\200\075\212\144\215\100\216\112\217\060\001\uff8d" +
    "\000\004\213\u0245\001\002\000\002\001\ufee3\000\004\063" +
    "\u0248\001\ufee8\000\002\001\ufee6\000\014\010\156\012\061" +
    "\100\335\104\056\215\100\001\002\000\004\212\u0243\001" +
    "\ufee2\000\002\001\ufee4\000\004\061\u024c\001\uffc1\000\004" +
    "\010\u01a4\001\002\000\004\062\u024f\001\uffbc\000\004\100" +
    "\u0251\001\002\000\004\010\u01a4\001\002\000\004\112\u01a5" +
    "\001\uffbb\000\002\001\uff7c\000\026\043\u01b4\052\u01ab\101" +
    "\u0253\103\u01b8\204\u01ad\205\u01b0\206\u01b3\207\u01b6\210\u01ac" +
    "\211\u01af\001\uff73\000\002\001\uffc6\000\002\001\uffc0\000" +
    "\132\004\140\006\106\007\011\010\034\011\053\012\061" +
    "\016\126\032\103\054\143\055\030\065\145\066\013\067" +
    "\020\070\045\071\047\072\132\073\006\074\035\104\056" +
    "\105\027\106\067\107\051\110\123\111\105\116\063\154" +
    "\104\155\066\161\141\162\014\164\052\165\146\166\026" +
    "\167\130\170\040\171\125\172\072\173\133\174\071\175" +
    "\036\200\075\212\144\215\100\216\112\217\060\001\002" +
    "\000\070\031\256\113\245\114\265\115\236\133\242\135" +
    "\237\136\257\137\240\140\247\141\260\142\264\143\251" +
    "\144\234\145\246\146\263\147\261\150\243\151\262\152" +
    "\255\153\250\154\266\155\244\156\254\157\252\160\235" +
    "\163\241\213\u0257\001\002\000\210\003\115\004\140\005" +
    "\151\006\106\007\011\010\034\011\053\012\061\014\074" +
    "\016\126\017\121\020\117\021\044\023\033\025\101\027" +
    "\152\032\103\034\127\040\055\041\120\044\134\045\041" +
    "\047\147\050\025\051\012\053\076\054\143\055\030\065" +
    "\145\066\013\067\020\070\045\071\047\072\132\073\006" +
    "\074\035\100\064\103\024\104\056\105\027\106\067\107" +
    "\051\110\123\111\105\116\063\134\010\154\104\155\066" +
    "\161\141\162\014\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\071\175\036\200\075" +
    "\204\042\212\144\214\u0258\215\100\216\112\217\060\001" +
    "\002\000\002\001\ufff8\000\002\001\uffef\000\002\001\uffa3" +
    "\000\224\003\115\004\140\005\151\006\106\007\011\010" +
    "\034\011\053\012\061\014\074\016\126\017\121\020\117" +
    "\021\044\022\u025c\023\033\025\101\027\152\032\103\034" +
    "\127\040\055\041\120\042\107\044\134\045\041\047\147" +
    "\050\025\051\012\053\076\054\143\055\030\056\222\057" +
    "\032\060\137\065\145\066\013\067\020\070\045\071\047" +
    "\072\132\073\006\074\035\100\064\103\024\104\056\105" +
    "\027\106\067\107\051\110\123\111\105\116\063\134\010" +
    "\154\104\155\066\161\141\162\014\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\071" +
    "\175\036\200\075\204\042\205\062\206\017\212\144\215" +
    "\100\216\112\217\060\001\002\000\002\001\uffa2\000\004" +
    "\117\u0264\001\uff7f\000\006\112\u025f\134\u0260\001\002\000" +
    "\004\012\u0261\001\002\000\002\001\uffe3\000\004\117\u0262" +
    "\001\uff81\000\034\006\106\007\011\010\166\016\126\066" +
    "\162\067\020\070\045\071\047\072\132\073\006\104\056" +
    "\154\160\155\167\001\002\000\002\001\uff80\000\034\006" +
    "\106\007\011\010\166\016\126\066\162\067\020\070\045" +
    "\071\047\072\132\073\006\104\056\154\160\155\167\001" +
    "\002\000\002\001\uff7e\000\002\001\ufff8\000\224\003\115" +
    "\004\140\005\151\006\106\007\011\010\034\011\053\012" +
    "\061\014\074\016\126\017\121\020\117\021\044\023\033" +
    "\025\101\027\152\032\103\034\127\040\055\041\120\042" +
    "\107\044\134\045\041\047\147\050\025\051\012\053\076" +
    "\054\143\055\030\056\222\057\032\060\137\065\145\066" +
    "\013\067\020\070\045\071\047\072\132\073\006\074\035" +
    "\100\064\101\u0268\103\024\104\056\105\027\106\067\107" +
    "\051\110\123\111\105\116\063\134\010\154\104\155\066" +
    "\161\141\162\014\164\052\165\146\166\026\167\130\170" +
    "\040\171\125\172\072\173\133\174\071\175\036\200\075" +
    "\204\042\205\062\206\017\212\144\215\100\216\112\217" +
    "\060\001\002\000\004\046\u0269\001\002\000\004\212\u026a" +
    "\001\002\000\004\010\u01a4\001\002\000\004\012\061\001" +
    "\002\000\004\213\u026d\001\002\000\004\100\u026e\001\002" +
    "\000\002\001\ufff8\000\224\003\115\004\140\005\151\006" +
    "\106\007\011\010\034\011\053\012\061\014\074\016\126" +
    "\017\121\020\117\021\044\023\033\025\101\027\152\032" +
    "\103\034\127\040\055\041\120\042\107\044\134\045\041" +
    "\047\147\050\025\051\012\053\076\054\143\055\030\056" +
    "\222\057\032\060\137\065\145\066\013\067\020\070\045" +
    "\071\047\072\132\073\006\074\035\100\064\101\u0270\103" +
    "\024\104\056\105\027\106\067\107\051\110\123\111\105" +
    "\116\063\134\010\154\104\155\066\161\141\162\014\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\071\175\036\200\075\204\042\205\062\206" +
    "\017\212\144\215\100\216\112\217\060\001\002\000\004" +
    "\046\u0271\001\uffd4\000\004\212\u0276\001\002\000\002\001" +
    "\uffd9\000\002\001\uffd3\000\004\046\u0271\001\uffd5\000\002" +
    "\001\uffd2\000\004\010\u01a4\001\002\000\004\012\u0278\001" +
    "\002\000\004\213\u0279\001\002\000\004\100\u027a\001\002" +
    "\000\002\001\ufff8\000\224\003\115\004\140\005\151\006" +
    "\106\007\011\010\034\011\053\012\061\014\074\016\126" +
    "\017\121\020\117\021\044\023\033\025\101\027\152\032" +
    "\103\034\127\040\055\041\120\042\107\044\134\045\041" +
    "\047\147\050\025\051\012\053\076\054\143\055\030\056" +
    "\222\057\032\060\137\065\145\066\013\067\020\070\045" +
    "\071\047\072\132\073\006\074\035\100\064\101\u027c\103" +
    "\024\104\056\105\027\106\067\107\051\110\123\111\105" +
    "\116\063\134\010\154\104\155\066\161\141\162\014\164" +
    "\052\165\146\166\026\167\130\170\040\171\125\172\072" +
    "\173\133\174\071\175\036\200\075\204\042\205\062\206" +
    "\017\212\144\215\100\216\112\217\060\001\002\000\002" +
    "\001\uffd1\000\002\001\uff26\000\002\001\uff20\000\014\012" +
    "\061\015\u01ec\075\u0280\076\u01eb\077\u01e9\001\002\000\002" +
    "\001\ufef6\000\132\004\140\006\106\007\011\010\034\011" +
    "\053\012\061\016\126\032\103\054\143\055\030\065\145" +
    "\066\013\067\020\070\045\071\047\072\132\073\006\074" +
    "\035\104\056\105\027\106\067\107\051\110\123\111\105" +
    "\116\063\154\104\155\066\161\141\162\014\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\071\175\036\200\075\212\144\215\100\216\112\217" +
    "\060\001\uff61\000\004\112\u028f\001\uff60\000\066\031\256" +
    "\113\245\114\265\115\236\133\242\135\237\136\257\137" +
    "\240\140\247\141\260\142\264\143\251\144\234\145\246" +
    "\146\263\147\261\150\243\151\262\152\255\153\250\154" +
    "\266\155\244\156\254\157\252\160\235\163\241\001\uff5e" +
    "\000\004\134\u0285\001\002\000\132\004\140\006\106\007" +
    "\011\010\034\011\053\012\061\016\126\032\103\054\143" +
    "\055\030\065\145\066\013\067\020\070\045\071\047\072" +
    "\132\073\006\074\035\104\056\105\027\106\067\107\051" +
    "\110\123\111\105\116\063\154\104\155\066\161\141\162" +
    "\014\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\071\175\036\200\075\212\144\215" +
    "\100\216\112\217\060\001\uff61\000\004\134\u0287\001\002" +
    "\000\132\004\140\006\106\007\011\010\034\011\053\012" +
    "\061\016\126\032\103\054\143\055\030\065\145\066\013" +
    "\067\020\070\045\071\047\072\132\073\006\074\035\104" +
    "\056\105\027\106\067\107\051\110\123\111\105\116\063" +
    "\154\104\155\066\161\141\162\014\164\052\165\146\166" +
    "\026\167\130\170\040\171\125\172\072\173\133\174\071" +
    "\175\036\200\075\212\144\215\100\216\112\217\060\001" +
    "\uff61\000\004\213\u0289\001\002\000\210\003\115\004\140" +
    "\005\151\006\106\007\011\010\034\011\053\012\061\014" +
    "\074\016\126\017\121\020\117\021\044\023\033\025\101" +
    "\027\152\032\103\034\127\040\055\041\120\044\134\045" +
    "\041\047\147\050\025\051\012\053\076\054\143\055\030" +
    "\065\145\066\013\067\020\070\045\071\047\072\132\073" +
    "\006\074\035\100\064\103\024\104\056\105\027\106\067" +
    "\107\051\110\123\111\105\116\063\134\010\154\104\155" +
    "\066\161\141\162\014\164\052\165\146\166\026\167\130" +
    "\170\040\171\125\172\072\173\133\174\071\175\036\200" +
    "\075\204\042\212\144\214\u028b\215\100\216\112\217\060" +
    "\001\002\000\002\001\uffed\000\002\001\ufff8\000\002\001" +
    "\uffb4\000\224\003\115\004\140\005\151\006\106\007\011" +
    "\010\034\011\053\012\061\014\074\016\126\017\121\020" +
    "\117\021\044\023\033\024\u028e\025\101\027\152\032\103" +
    "\034\127\040\055\041\120\042\107\044\134\045\041\047" +
    "\147\050\025\051\012\053\076\054\143\055\030\056\222" +
    "\057\032\060\137\065\145\066\013\067\020\070\045\071" +
    "\047\072\132\073\006\074\035\100\064\103\024\104\056" +
    "\105\027\106\067\107\051\110\123\111\105\116\063\134" +
    "\010\154\104\155\066\161\141\162\014\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\071\175\036\200\075\204\042\205\062\206\017\212\144" +
    "\215\100\216\112\217\060\001\002\000\002\001\uffb3\000" +
    "\132\004\140\006\106\007\011\010\034\011\053\012\061" +
    "\016\126\032\103\054\143\055\030\065\145\066\013\067" +
    "\020\070\045\071\047\072\132\073\006\074\035\104\056" +
    "\105\027\106\067\107\051\110\123\111\105\116\063\154" +
    "\104\155\066\161\141\162\014\164\052\165\146\166\026" +
    "\167\130\170\040\171\125\172\072\173\133\174\071\175" +
    "\036\200\075\212\144\215\100\216\112\217\060\001\002" +
    "\000\066\031\256\113\245\114\265\115\236\133\242\135" +
    "\237\136\257\137\240\140\247\141\260\142\264\143\251" +
    "\144\234\145\246\146\263\147\261\150\243\151\262\152" +
    "\255\153\250\154\266\155\244\156\254\157\252\160\235" +
    "\163\241\001\uff5f\000\010\010\u0292\012\061\215\100\001" +
    "\002\000\004\212\u011f\001\ufea5\000\012\010\034\012\061" +
    "\104\056\215\100\001\002\000\004\213\u0295\001\002\000" +
    "\002\001\ufead\000\066\031\256\113\245\114\265\115\236" +
    "\133\242\135\237\136\257\137\240\140\247\141\260\142" +
    "\264\143\251\144\234\145\246\146\263\147\261\150\243" +
    "\151\262\152\255\153\250\154\266\155\244\156\254\157" +
    "\252\160\235\163\241\001\ufeac\000\002\001\uff28\000\004" +
    "\016\u029c\001\002\000\004\134\u029b\001\002\000\002\001" +
    "\uffcd\000\002\001\uffdf\000\004\213\u029d\001\002\000\002" +
    "\001\uffcc\000\002\001\uffd6\000\002\001\uffc2\000\002\001" +
    "\uffe0\000\002\001\uff35\000\134\004\140\006\106\007\011" +
    "\010\034\011\053\012\061\016\126\032\103\054\143\055" +
    "\030\065\145\066\013\067\020\070\045\071\047\072\132" +
    "\073\006\074\035\104\056\105\027\106\067\107\051\110" +
    "\123\111\105\116\063\141\u02a5\154\104\155\066\161\141" +
    "\162\014\164\052\165\146\166\026\167\130\170\040\171" +
    "\125\172\072\173\133\174\071\175\036\200\075\212\144" +
    "\215\100\216\112\217\060\001\ufec4\000\004\213\u02b5\001" +
    "\002\000\004\112\u02ac\001\ufef3\000\012\010\034\012\061" +
    "\104\056\215\100\001\002\000\070\031\256\064\u02a7\113" +
    "\245\114\265\115\236\133\242\135\237\136\257\137\240" +
    "\140\247\141\260\142\264\143\251\144\234\145\246\146" +
    "\263\147\261\150\243\151\262\152\255\153\250\154\266" +
    "\155\244\156\254\157\252\160\235\163\241\001\ufebf\000" +
    "\134\004\140\006\106\007\011\010\034\011\053\012\061" +
    "\016\126\032\103\054\143\055\030\065\145\066\013\067" +
    "\020\070\045\071\047\072\132\073\006\074\035\104\056" +
    "\105\027\106\067\107\051\110\123\111\105\116\063\141" +
    "\u02a8\154\104\155\066\161\141\162\014\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\071\175\036\200\075\212\144\215\100\216\112\217\060" +
    "\001\002\000\012\010\034\012\061\104\056\215\100\001" +
    "\002\000\066\031\256\113\245\114\265\115\236\133\242" +
    "\135\237\136\257\137\240\140\247\141\260\142\264\143" +
    "\251\144\234\145\246\146\263\147\261\150\243\151\262" +
    "\152\255\153\250\154\266\155\244\156\254\157\252\160" +
    "\235\163\241\001\ufec0\000\002\001\ufebc\000\002\001\ufebb" +
    "\000\134\004\140\006\106\007\011\010\034\011\053\012" +
    "\061\016\126\032\103\054\143\055\030\065\145\066\013" +
    "\067\020\070\045\071\047\072\132\073\006\074\035\104" +
    "\056\105\027\106\067\107\051\110\123\111\105\116\063" +
    "\141\u02ae\154\104\155\066\161\141\162\014\164\052\165" +
    "\146\166\026\167\130\170\040\171\125\172\072\173\133" +
    "\174\071\175\036\200\075\212\144\215\100\216\112\217" +
    "\060\001\ufef2\000\002\001\ufec3\000\012\010\034\012\061" +
    "\104\056\215\100\001\002\000\070\031\256\064\u02b0\113" +
    "\245\114\265\115\236\133\242\135\237\136\257\137\240" +
    "\140\247\141\260\142\264\143\251\144\234\145\246\146" +
    "\263\147\261\150\243\151\262\152\255\153\250\154\266" +
    "\155\244\156\254\157\252\160\235\163\241\001\ufec1\000" +
    "\134\004\140\006\106\007\011\010\034\011\053\012\061" +
    "\016\126\032\103\054\143\055\030\065\145\066\013\067" +
    "\020\070\045\071\047\072\132\073\006\074\035\104\056" +
    "\105\027\106\067\107\051\110\123\111\105\116\063\141" +
    "\u02b1\154\104\155\066\161\141\162\014\164\052\165\146" +
    "\166\026\167\130\170\040\171\125\172\072\173\133\174" +
    "\071\175\036\200\075\212\144\215\100\216\112\217\060" +
    "\001\002\000\012\010\034\012\061\104\056\215\100\001" +
    "\002\000\066\031\256\113\245\114\265\115\236\133\242" +
    "\135\237\136\257\137\240\140\247\141\260\142\264\143" +
    "\251\144\234\145\246\146\263\147\261\150\243\151\262" +
    "\152\255\153\250\154\266\155\244\156\254\157\252\160" +
    "\235\163\241\001\ufec2\000\002\001\ufebe\000\002\001\ufebd" +
    "\000\002\001\uff1e\000\006\112\u02bf\134\u02c0\001\002\000" +
    "\002\001\uff84\000\014\010\034\012\061\100\u02bc\104\056" +
    "\215\100\001\002\000\002\001\uff85\000\002\001\uff83\000" +
    "\002\001\ufeeb\000\132\004\140\006\106\007\011\010\034" +
    "\011\053\012\061\016\126\032\103\054\143\055\030\065" +
    "\145\066\013\067\020\070\045\071\047\072\132\073\006" +
    "\074\035\104\056\105\027\106\067\107\051\110\123\111" +
    "\105\116\063\154\104\155\066\161\141\162\014\164\052" +
    "\165\146\166\026\167\130\170\040\171\125\172\072\173" +
    "\133\174\071\175\036\200\075\212\144\215\100\216\112" +
    "\217\060\001\002\000\070\031\256\101\u02be\113\245\114" +
    "\265\115\236\133\242\135\237\136\257\137\240\140\247" +
    "\141\260\142\264\143\251\144\234\145\246\146\263\147" +
    "\261\150\243\151\262\152\255\153\250\154\266\155\244" +
    "\156\254\157\252\160\235\163\241\001\002\000\002\001" +
    "\uff82\000\006\012\u02b7\215\u02b8\001\002\000\002\001\uffe4" +
    "\000\002\001\uff86\000\134\004\140\006\106\007\011\010" +
    "\034\011\053\012\061\016\126\032\103\054\143\055\030" +
    "\065\145\066\013\067\020\070\045\071\047\072\132\073" +
    "\006\074\035\104\056\105\027\106\067\107\051\110\123" +
    "\111\105\116\063\141\u0123\154\104\155\066\161\141\162" +
    "\014\164\052\165\146\166\026\167\130\170\040\171\125" +
    "\172\072\173\133\174\071\175\036\200\075\212\144\215" +
    "\100\216\112\217\060\001\uff8d\000\004\213\u02c4\001\002" +
    "\000\002\001\uff18\000\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02c3\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\074\005\147\006\141\011\110\051\134\052\042" +
    "\055\107\057\014\063\015\064\053\065\115\072\067\102" +
    "\064\103\123\104\113\107\030\120\101\121\121\122\022" +
    "\126\130\127\021\130\045\135\135\137\076\140\006\142" +
    "\020\144\112\146\072\150\036\154\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\u02b5\041\u02b8\001\001\000\002\001\001" +
    "\000\052\051\134\052\042\055\107\057\014\063\u02a0\064" +
    "\053\065\115\072\067\102\064\103\123\107\030\122\022" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\011\u029d\051\134" +
    "\052\042\055\107\057\014\063\015\064\053\065\115\072" +
    "\067\102\064\103\123\107\030\122\022\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\047\001" +
    "\001\000\004\014\u0298\001\001\000\052\051\134\052\042" +
    "\055\107\057\014\063\u0296\064\053\065\115\072\067\102" +
    "\064\103\123\107\030\122\022\135\135\137\076\140\006" +
    "\142\020\144\112\146\072\150\036\154\047\001\001\000" +
    "\052\051\134\052\042\055\107\057\014\063\u0295\064\053" +
    "\065\115\072\067\102\064\103\123\107\030\122\022\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\077\u027e\001\001\000\052\051\134\052\042\055\107\057" +
    "\014\063\u027d\064\053\065\115\072\067\102\064\103\123" +
    "\107\030\122\022\135\135\137\076\140\006\142\020\144" +
    "\112\146\072\150\036\154\047\001\001\000\002\001\001" +
    "\000\052\051\134\052\042\055\107\057\014\063\u027c\064" +
    "\053\065\115\072\067\102\064\103\123\107\030\122\022" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\047\001\001\000\002\001\001\000\004\042\u025d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\052\042\064\053\065\115\072" +
    "\067\103\u0117\107\u011a\122\u0118\137\u023b\140\006\142\020" +
    "\144\112\150\036\154\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\051\134\052\042\055\107\057\014" +
    "\063\u0239\064\053\065\115\072\067\102\064\103\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\077\u0233\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\051\134\052\042\055\107\057" +
    "\014\063\u0231\064\053\065\115\072\067\102\064\103\123" +
    "\107\030\122\022\135\135\137\076\140\006\142\020\144" +
    "\112\146\072\150\036\154\047\001\001\000\004\007\u022f" +
    "\001\001\000\002\001\001\000\052\051\134\052\042\055" +
    "\107\057\014\063\u022e\064\053\065\115\072\067\102\064" +
    "\103\123\107\030\122\022\135\135\137\076\140\006\142" +
    "\020\144\112\146\072\150\036\154\047\001\001\000\052" +
    "\051\134\052\042\055\107\057\014\063\u022d\064\053\065" +
    "\115\072\067\102\064\103\123\107\030\122\022\135\135" +
    "\137\076\140\006\142\020\144\112\146\072\150\036\154" +
    "\047\001\001\000\010\064\u022c\065\115\144\112\001\001" +
    "\000\052\051\134\052\042\055\107\057\014\063\u022b\064" +
    "\053\065\115\072\067\102\064\103\123\107\030\122\022" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\047\001\001\000\052\051\134\052\042\055\107" +
    "\057\014\063\u022a\064\053\065\115\072\067\102\064\103" +
    "\123\107\030\122\022\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\064\304\065\115\072\301" +
    "\107\302\142\020\144\112\145\u0228\147\300\150\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\051\134\052" +
    "\042\055\107\057\014\063\u0207\064\053\065\115\072\067" +
    "\102\064\103\123\107\030\122\022\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\047\001\001" +
    "\000\052\051\134\052\042\055\107\057\014\063\u0206\064" +
    "\053\065\115\072\067\102\064\103\123\107\030\122\022" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\047\001\001\000\052\051\134\052\042\055\107" +
    "\057\014\063\u0205\064\053\065\115\072\067\102\064\103" +
    "\123\107\030\122\022\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\047\001\001\000\002\001" +
    "\001\000\004\045\u01fd\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\077\u01e5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\006\u0198\011\110\051\134\052\042\055\107\057\014\063" +
    "\015\064\053\065\115\072\067\102\064\103\123\107\030" +
    "\122\022\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\047\001\001\000\052\051\134\052\042" +
    "\055\107\057\014\063\u0196\064\053\065\115\072\067\102" +
    "\064\103\123\107\030\122\022\135\135\137\076\140\006" +
    "\142\020\144\112\146\072\150\036\154\047\001\001\000" +
    "\054\046\u0190\051\134\052\042\055\107\057\014\063\u0191" +
    "\064\053\065\115\072\067\102\064\103\123\107\030\122" +
    "\022\135\135\137\076\140\006\142\020\144\112\146\072" +
    "\150\036\154\047\001\001\000\002\001\001\000\052\051" +
    "\134\052\042\055\107\057\014\063\u018f\064\053\065\115" +
    "\072\067\102\064\103\123\107\030\122\022\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\047" +
    "\001\001\000\002\001\001\000\052\051\134\052\042\055" +
    "\107\057\014\063\u018e\064\053\065\115\072\067\102\064" +
    "\103\123\107\030\122\022\135\135\137\076\140\006\142" +
    "\020\144\112\146\072\150\036\154\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\051\134\052\042\055" +
    "\107\057\014\063\u0174\064\053\065\115\072\067\102\064" +
    "\103\123\107\030\122\022\135\135\137\076\140\006\142" +
    "\020\144\112\146\072\150\036\154\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\051\134\052\042\055" +
    "\107\057\014\063\u0173\064\053\065\115\072\067\102\064" +
    "\103\123\107\030\122\022\135\135\137\076\140\006\142" +
    "\020\144\112\146\072\150\036\154\047\001\001\000\052" +
    "\051\u0170\052\042\055\107\057\014\063\u0123\064\053\065" +
    "\115\072\067\102\064\103\123\107\030\122\u016f\135\135" +
    "\137\076\140\006\142\020\144\112\146\072\150\036\154" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\u016a\001\001\000\052\051\134\052" +
    "\042\055\107\057\014\063\u0168\064\053\065\115\072\067" +
    "\102\064\103\123\107\030\122\022\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\051\134\052" +
    "\042\055\107\057\014\063\u0160\064\053\065\115\072\067" +
    "\102\064\103\123\107\030\122\022\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\047\001\001" +
    "\000\002\001\001\000\034\052\042\064\053\065\115\072" +
    "\067\103\u0117\107\u011a\122\u0118\137\u0119\140\006\142\020" +
    "\144\112\150\036\154\047\001\001\000\052\051\134\052" +
    "\042\055\107\057\014\063\u0115\064\053\065\115\072\067" +
    "\102\064\103\123\107\030\122\022\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\153\103\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\055\163\056\162\103" +
    "\160\153\164\001\001\000\012\055\163\056\206\103\160" +
    "\153\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\055\163\056\167\103\160\153\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\055\163\056\175\060\173\062\174\103\160\153" +
    "\164\001\001\000\002\001\001\000\004\061\201\001\001" +
    "\000\002\001\001\000\012\055\163\056\177\103\160\153" +
    "\164\001\001\000\002\001\001\000\012\055\163\056\202" +
    "\103\160\153\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\055\163\056\204\103\160\153\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\006\216\011\110\021\214\051\134\052\042\055\107" +
    "\057\014\063\015\064\053\065\115\072\067\102\064\103" +
    "\123\107\030\122\022\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\047\001\001\000\004\103" +
    "\211\001\001\000\002\001\001\000\012\055\163\056\213" +
    "\103\160\153\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\217\001\001\000\002\001\001\000\074" +
    "\006\225\010\220\011\110\051\134\052\042\055\107\057" +
    "\014\063\015\064\053\065\115\072\067\102\064\103\123" +
    "\104\113\107\030\120\222\121\224\122\022\126\130\127" +
    "\021\130\045\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\051\134\052\042\055\107" +
    "\057\014\063\232\064\053\065\115\072\067\102\064\103" +
    "\123\107\030\122\022\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\047\001\001\000\002\001" +
    "\001\000\052\051\134\052\042\055\107\057\014\063\u0114" +
    "\064\053\065\115\072\067\102\064\103\123\107\030\122" +
    "\022\135\135\137\076\140\006\142\020\144\112\146\072" +
    "\150\036\154\047\001\001\000\052\051\134\052\042\055" +
    "\107\057\014\063\u0113\064\053\065\115\072\067\102\064" +
    "\103\123\107\030\122\022\135\135\137\076\140\006\142" +
    "\020\144\112\146\072\150\036\154\047\001\001\000\052" +
    "\051\134\052\042\055\107\057\014\063\u0112\064\053\065" +
    "\115\072\067\102\064\103\123\107\030\122\022\135\135" +
    "\137\076\140\006\142\020\144\112\146\072\150\036\154" +
    "\047\001\001\000\052\051\134\052\042\055\107\057\014" +
    "\063\u0111\064\053\065\115\072\067\102\064\103\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\047\001\001\000\052\051\134\052" +
    "\042\055\107\057\014\063\u0110\064\053\065\115\072\067" +
    "\102\064\103\123\107\030\122\022\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\047\001\001" +
    "\000\052\051\134\052\042\055\107\057\014\063\u010f\064" +
    "\053\065\115\072\067\102\064\103\123\107\030\122\022" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\047\001\001\000\052\051\134\052\042\055\107" +
    "\057\014\063\u010c\064\053\065\115\072\067\102\064\103" +
    "\123\107\030\122\022\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\047\001\001\000\052\051" +
    "\134\052\042\055\107\057\014\063\u010b\064\053\065\115" +
    "\072\067\102\064\103\123\107\030\122\022\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\047" +
    "\001\001\000\052\051\134\052\042\055\107\057\014\063" +
    "\u010a\064\053\065\115\072\067\102\064\103\123\107\030" +
    "\122\022\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\047\001\001\000\052\051\134\052\042" +
    "\055\107\057\014\063\u0109\064\053\065\115\072\067\102" +
    "\064\103\123\107\030\122\022\135\135\137\076\140\006" +
    "\142\020\144\112\146\072\150\036\154\047\001\001\000" +
    "\052\051\134\052\042\055\107\057\014\063\u0108\064\053" +
    "\065\115\072\067\102\064\103\123\107\030\122\022\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\047\001\001\000\052\051\134\052\042\055\107\057" +
    "\014\063\u0107\064\053\065\115\072\067\102\064\103\123" +
    "\107\030\122\022\135\135\137\076\140\006\142\020\144" +
    "\112\146\072\150\036\154\047\001\001\000\052\051\134" +
    "\052\042\055\107\057\014\063\u0106\064\053\065\115\072" +
    "\067\102\064\103\123\107\030\122\022\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\047\001" +
    "\001\000\052\051\134\052\042\055\107\057\014\063\u0105" +
    "\064\053\065\115\072\067\102\064\103\123\107\030\122" +
    "\022\135\135\137\076\140\006\142\020\144\112\146\072" +
    "\150\036\154\047\001\001\000\052\051\134\052\042\055" +
    "\107\057\014\063\u0104\064\053\065\115\072\067\102\064" +
    "\103\123\107\030\122\022\135\135\137\076\140\006\142" +
    "\020\144\112\146\072\150\036\154\047\001\001\000\056" +
    "\006\354\011\110\051\134\052\042\055\107\057\014\063" +
    "\015\064\053\065\115\072\067\102\064\103\123\107\030" +
    "\122\022\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\047\001\001\000\052\051\134\052\042" +
    "\055\107\057\014\063\352\064\053\065\115\072\067\102" +
    "\064\103\123\107\030\122\022\135\135\137\076\140\006" +
    "\142\020\144\112\146\072\150\036\154\047\001\001\000" +
    "\052\051\134\052\042\055\107\057\014\063\351\064\053" +
    "\065\115\072\067\102\064\103\123\107\030\122\022\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\047\001\001\000\024\064\304\065\115\072\301\107" +
    "\302\142\020\144\112\145\276\147\300\150\277\001\001" +
    "\000\052\051\134\052\042\055\107\057\014\063\275\064" +
    "\053\065\115\072\067\102\064\103\123\107\030\122\022" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\047\001\001\000\052\051\134\052\042\055\107" +
    "\057\014\063\274\064\053\065\115\072\067\102\064\103" +
    "\123\107\030\122\022\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\047\001\001\000\052\051" +
    "\134\052\042\055\107\057\014\063\273\064\053\065\115" +
    "\072\067\102\064\103\123\107\030\122\022\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\047" +
    "\001\001\000\052\051\134\052\042\055\107\057\014\063" +
    "\272\064\053\065\115\072\067\102\064\103\123\107\030" +
    "\122\022\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\047\001\001\000\052\051\134\052\042" +
    "\055\107\057\014\063\271\064\053\065\115\072\067\102" +
    "\064\103\123\107\030\122\022\135\135\137\076\140\006" +
    "\142\020\144\112\146\072\150\036\154\047\001\001\000" +
    "\052\051\134\052\042\055\107\057\014\063\270\064\053" +
    "\065\115\072\067\102\064\103\123\107\030\122\022\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\047\001\001\000\052\051\134\052\042\055\107\057" +
    "\014\063\267\064\053\065\115\072\067\102\064\103\123" +
    "\107\030\122\022\135\135\137\076\140\006\142\020\144" +
    "\112\146\072\150\036\154\047\001\001\000\052\051\134" +
    "\052\042\055\107\057\014\063\266\064\053\065\115\072" +
    "\067\102\064\103\123\107\030\122\022\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\064\325\065\115\144" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\051\134\052\042\055\107\057\014\063" +
    "\312\064\053\065\115\072\067\102\064\103\123\107\030" +
    "\122\022\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\047\001\001\000\054\051\134\052\042" +
    "\055\107\057\014\063\310\064\053\065\115\066\307\072" +
    "\067\102\064\103\123\107\030\122\022\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\064\317\065" +
    "\115\072\316\140\315\144\112\001\001\000\002\001\001" +
    "\000\010\064\320\065\115\144\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\051\134" +
    "\052\042\055\107\057\014\063\323\064\053\065\115\072" +
    "\067\102\064\103\123\107\030\122\022\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\064\317\065\115\067\332\070\333\071\330\072" +
    "\316\103\327\140\331\144\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\151\345\001" +
    "\001\000\002\001\001\000\052\051\134\052\042\055\107" +
    "\057\014\063\335\064\053\065\115\072\067\102\064\103" +
    "\123\107\030\122\022\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\051\134\052\042\055\107" +
    "\057\014\063\343\064\053\065\115\072\067\102\064\103" +
    "\123\107\030\122\022\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\047\001\001\000\054\051" +
    "\134\052\042\055\107\057\014\063\310\064\053\065\115" +
    "\066\341\072\067\102\064\103\123\107\030\122\022\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\152\346\001\001" +
    "\000\002\001\001\000\024\064\317\065\115\067\350\070" +
    "\333\071\330\072\316\103\327\140\331\144\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\366\001\001\000\004\027\355\001\001\000\004" +
    "\031\356\001\001\000\002\001\001\000\056\006\365\011" +
    "\110\051\134\052\042\055\107\057\014\063\015\064\053" +
    "\065\115\072\067\102\064\103\123\107\030\122\022\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\047\001\001\000\002\001\001\000\052\051\134\052" +
    "\042\055\107\057\014\063\362\064\053\065\115\072\067" +
    "\102\064\103\123\107\030\122\022\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\047\001\001" +
    "\000\002\001\001\000\056\006\364\011\110\051\134\052" +
    "\042\055\107\057\014\063\015\064\053\065\115\072\067" +
    "\102\064\103\123\107\030\122\022\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\076\006\225\010" +
    "\220\011\110\030\367\051\134\052\042\055\107\057\014" +
    "\063\015\064\053\065\115\072\067\102\064\103\123\104" +
    "\113\107\030\120\222\121\224\122\022\126\130\127\021" +
    "\130\045\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\047\001\001\000\004\032\370\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\051\134\052\042\055\107\057\014\063\374\064\053" +
    "\065\115\072\067\102\064\103\123\107\030\122\022\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\377\001\001\000\074\006\225\010\220\011\110" +
    "\051\134\052\042\055\107\057\014\063\015\064\053\065" +
    "\115\072\067\102\064\103\123\104\113\107\030\120\222" +
    "\121\224\122\022\126\130\127\021\130\045\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\047" +
    "\001\001\000\004\007\u0101\001\001\000\074\006\225\010" +
    "\220\011\110\051\134\052\042\055\107\057\014\063\015" +
    "\064\053\065\115\072\067\102\064\103\123\104\113\107" +
    "\030\120\222\121\224\122\022\126\130\127\021\130\045" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\051" +
    "\134\052\042\055\107\057\014\063\u010e\064\053\065\115" +
    "\072\067\102\064\103\123\107\030\122\022\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\064\317\065\115\072\316\140\u011c\144" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\036\u0121\037\u011f\051\u0124\052\042\055\107\057\014\063" +
    "\u0123\064\053\065\115\072\067\102\064\103\123\107\030" +
    "\122\u0120\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\052\042\064\053\065" +
    "\115\072\067\103\u0117\106\u0125\107\u011a\122\u0126\140\006" +
    "\142\020\144\112\150\036\154\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\051\134\052\042\055\107\057" +
    "\014\063\u0147\064\053\065\115\072\067\102\064\103\123" +
    "\107\030\122\022\135\135\137\076\140\006\142\020\144" +
    "\112\146\072\150\036\154\047\001\001\000\052\051\134" +
    "\052\042\055\107\057\014\063\u013f\064\053\065\115\072" +
    "\067\102\064\103\123\107\030\122\022\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\047\001" +
    "\001\000\052\051\134\052\042\055\107\057\014\063\u013d" +
    "\064\053\065\115\072\067\102\064\103\123\107\030\122" +
    "\022\135\135\137\076\140\006\142\020\144\112\146\072" +
    "\150\036\154\047\001\001\000\052\051\134\052\042\055" +
    "\107\057\014\063\u013c\064\053\065\115\072\067\102\064" +
    "\103\123\107\030\122\022\135\135\137\076\140\006\142" +
    "\020\144\112\146\072\150\036\154\047\001\001\000\052" +
    "\051\134\052\042\055\107\057\014\063\u013b\064\053\065" +
    "\115\072\067\102\064\103\123\107\030\122\022\135\135" +
    "\137\076\140\006\142\020\144\112\146\072\150\036\154" +
    "\047\001\001\000\052\051\134\052\042\055\107\057\014" +
    "\063\u013a\064\053\065\115\072\067\102\064\103\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\047\001\001\000\052\051\134\052" +
    "\042\055\107\057\014\063\u0139\064\053\065\115\072\067" +
    "\102\064\103\123\107\030\122\022\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\047\001\001" +
    "\000\052\051\134\052\042\055\107\057\014\063\u0138\064" +
    "\053\065\115\072\067\102\064\103\123\107\030\122\022" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\047\001\001\000\052\051\134\052\042\055\107" +
    "\057\014\063\u0137\064\053\065\115\072\067\102\064\103" +
    "\123\107\030\122\022\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\047\001\001\000\052\051" +
    "\134\052\042\055\107\057\014\063\u0136\064\053\065\115" +
    "\072\067\102\064\103\123\107\030\122\022\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\047" +
    "\001\001\000\052\051\134\052\042\055\107\057\014\063" +
    "\u0135\064\053\065\115\072\067\102\064\103\123\107\030" +
    "\122\022\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\047\001\001\000\052\051\134\052\042" +
    "\055\107\057\014\063\u0134\064\053\065\115\072\067\102" +
    "\064\103\123\107\030\122\022\135\135\137\076\140\006" +
    "\142\020\144\112\146\072\150\036\154\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\052\042\064\053\065\115\072\067\103\u0117\107" +
    "\u011a\122\u0141\140\006\142\020\144\112\150\036\154\047" +
    "\001\001\000\002\001\001\000\024\064\304\065\115\072" +
    "\301\107\302\142\020\144\112\145\u0142\147\300\150\277" +
    "\001\001\000\002\001\001\000\004\054\u0143\001\001\000" +
    "\002\001\001\000\056\036\u0145\037\u011f\051\u0124\052\042" +
    "\055\107\057\014\063\u0123\064\053\065\115\072\067\102" +
    "\064\103\123\107\030\122\u0120\135\135\137\076\140\006" +
    "\142\020\144\112\146\072\150\036\154\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\051\u014b\052\042\055\107\057\014\063\u0123\064\053\065" +
    "\115\072\067\102\064\103\123\107\030\122\u0149\135\135" +
    "\137\076\140\006\142\020\144\112\146\072\150\036\154" +
    "\047\001\001\000\002\001\001\000\034\052\042\064\053" +
    "\065\115\072\067\103\u0117\106\u014c\107\u011a\122\u0126\140" +
    "\006\142\020\144\112\150\036\154\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\036\u014e\037\u011f\051" +
    "\u0124\052\042\055\107\057\014\063\u0123\064\053\065\115" +
    "\072\067\102\064\103\123\107\030\122\u0120\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\036" +
    "\u0151\037\u011f\051\u0124\052\042\055\107\057\014\063\u0123" +
    "\064\053\065\115\072\067\102\064\103\123\107\030\122" +
    "\u0120\135\135\137\076\140\006\142\020\144\112\146\072" +
    "\150\036\154\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\052\042\064\053\065\115\072\067\073\u0154" +
    "\074\u0155\103\u0117\107\u011a\122\u0156\140\006\142\020\144" +
    "\112\150\036\154\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\052" +
    "\042\064\053\065\115\072\067\073\u0159\074\u0155\103\u0117" +
    "\107\u011a\122\u0156\140\006\142\020\144\112\150\036\154" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\052\042\064\053\065\115\072\067\074\u015c\103\u0117\107" +
    "\u011a\122\u0156\140\006\142\020\144\112\150\036\154\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\051" +
    "\134\052\042\055\107\057\014\063\u015f\064\053\065\115" +
    "\072\067\102\064\103\123\107\030\122\022\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\052\042\064\053\065\115\072\067\103\u0117" +
    "\107\u011a\122\u0163\140\006\142\020\143\u0164\144\112\150" +
    "\036\154\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\052\042\064\053\065\115\072" +
    "\067\103\u0117\107\u011a\122\u0167\140\006\142\020\144\112" +
    "\150\036\154\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\051\134\052\042\055\107\057\014\063\u016b" +
    "\064\053\065\115\072\067\102\064\103\123\107\030\122" +
    "\022\135\135\137\076\140\006\142\020\144\112\146\072" +
    "\150\036\154\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\051\134\052\042\055\107\057\014\063\u0176\064\053\065" +
    "\115\072\067\102\064\103\123\107\030\122\022\135\135" +
    "\137\076\140\006\142\020\144\112\146\072\150\036\154" +
    "\047\001\001\000\002\001\001\000\004\023\u0178\001\001" +
    "\000\002\001\001\000\004\024\u0189\001\001\000\004\024" +
    "\u017b\001\001\000\002\001\001\000\004\024\u017d\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\051\134\052" +
    "\042\055\107\057\014\063\u0185\064\053\065\115\072\067" +
    "\102\064\103\123\107\030\122\022\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\047\001\001" +
    "\000\004\025\u0181\001\001\000\004\007\u0184\001\001\000" +
    "\002\001\001\000\002\001\001\000\074\006\225\010\220" +
    "\011\110\051\134\052\042\055\107\057\014\063\015\064" +
    "\053\065\115\072\067\102\064\103\123\104\113\107\030" +
    "\120\222\121\224\122\022\126\130\127\021\130\045\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\047\001\001\000\004\025\u0186\001\001\000\004\007" +
    "\u0187\001\001\000\074\006\225\010\220\011\110\051\134" +
    "\052\042\055\107\057\014\063\015\064\053\065\115\072" +
    "\067\102\064\103\123\104\113\107\030\120\222\121\224" +
    "\122\022\126\130\127\021\130\045\135\135\137\076\140" +
    "\006\142\020\144\112\146\072\150\036\154\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u018b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\051\134\052\042\055\107\057\014" +
    "\063\u0194\064\053\065\115\072\067\102\064\103\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\051" +
    "\134\052\042\055\107\057\014\063\u019b\064\053\065\115" +
    "\072\067\102\064\103\123\107\030\122\022\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\105\u019f\001\001\000\002\001\001\000\006" +
    "\107\u01a2\133\u01a1\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\107\u01a5\001\001\000\002" +
    "\001\001\000\004\043\u01a7\001\001\000\016\044\u01a8\111" +
    "\u01a9\112\u01b6\114\u01b4\115\u01ad\136\u01b1\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\110\u01d8\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\115\u01d3" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\011" +
    "\u01b8\051\134\052\042\055\107\057\014\063\015\064\053" +
    "\065\115\072\067\102\064\103\123\107\030\122\022\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\047\001\001\000\002\001\001\000\004\045\u01ba\001" +
    "\001\000\004\103\u01bc\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\033\u01c1\034\u01c2\035\u01c3\134\u01bf\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\035\u01c5\134\u01bf\001\001\000\002\001\001\000\004" +
    "\113\u01c7\001\001\000\002\001\001\000\004\007\u01ca\001" +
    "\001\000\002\001\001\000\074\006\225\010\220\011\110" +
    "\051\134\052\042\055\107\057\014\063\015\064\053\065" +
    "\115\072\067\102\064\103\123\104\113\107\030\120\222" +
    "\121\224\122\022\126\130\127\021\130\045\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\055\163\056\u01cf\103\160\153\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\055\163\056" +
    "\u01d2\103\160\153\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\055\163\056\u01d6\103" +
    "\160\153\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\055\163\056\u01dd\103\160\153\164" +
    "\001\001\000\002\001\001\000\012\055\163\056\u01df\103" +
    "\160\153\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\055\163\056" +
    "\u01e4\103\160\153\164\001\001\000\002\001\001\000\006" +
    "\100\u01e7\144\u01e6\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\052\042\064\053\065\115\072\067\103\u0117" +
    "\107\u011a\122\u01f3\140\006\142\020\144\112\150\036\154" +
    "\047\001\001\000\002\001\001\000\052\051\134\052\042" +
    "\055\107\057\014\063\u01ed\064\053\065\115\072\067\102" +
    "\064\103\123\107\030\122\022\135\135\137\076\140\006" +
    "\142\020\144\112\146\072\150\036\154\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\051\134\052\042\055\107\057\014\063" +
    "\u01f0\064\053\065\115\072\067\102\064\103\123\107\030" +
    "\122\022\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\101\u01f9\103\u01fa\144\u01f8\001\001\000\004" +
    "\103\u01f7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\103\u01fe\001\001\000\002\001\001\000" +
    "\012\033\u0200\034\u01c2\035\u01c3\134\u01bf\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\u0203\001\001\000" +
    "\074\006\225\010\220\011\110\051\134\052\042\055\107" +
    "\057\014\063\015\064\053\065\115\072\067\102\064\103" +
    "\123\104\113\107\030\120\222\121\224\122\022\126\130" +
    "\127\021\130\045\135\135\137\076\140\006\142\020\144" +
    "\112\146\072\150\036\154\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\051\u020a\052\042\055\107\057\014\063\u0123\064\053" +
    "\065\115\072\067\102\064\103\123\107\030\122\u0209\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\052\042\064\053\065\115\072\067\103\u0117\107\u011a" +
    "\122\u020c\140\006\142\020\144\112\150\036\154\047\001" +
    "\001\000\004\015\u020d\001\001\000\002\001\001\000\034" +
    "\016\u020f\052\042\064\053\065\115\072\067\103\u0117\107" +
    "\u011a\122\u0210\140\006\142\020\144\112\150\036\154\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\052" +
    "\042\064\053\065\115\072\067\103\u0117\107\u011a\122\u0212" +
    "\140\006\142\020\144\112\150\036\154\047\001\001\000" +
    "\002\001\001\000\060\006\u0215\011\110\020\u0216\051\134" +
    "\052\042\055\107\057\014\063\015\064\053\065\115\072" +
    "\067\102\064\103\123\107\030\122\022\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\047\001" +
    "\001\000\004\007\u0217\001\001\000\002\001\001\000\002" +
    "\001\001\000\074\006\225\010\220\011\110\051\134\052" +
    "\042\055\107\057\014\063\015\064\053\065\115\072\067" +
    "\102\064\103\123\104\113\107\030\120\222\121\224\122" +
    "\022\126\130\127\021\130\045\135\135\137\076\140\006" +
    "\142\020\144\112\146\072\150\036\154\047\001\001\000" +
    "\002\001\001\000\034\016\u021a\052\042\064\053\065\115" +
    "\072\067\103\u0117\107\u011a\122\u0210\140\006\142\020\144" +
    "\112\150\036\154\047\001\001\000\004\015\u021b\001\001" +
    "\000\002\001\001\000\060\006\u0215\011\110\020\u021d\051" +
    "\134\052\042\055\107\057\014\063\015\064\053\065\115" +
    "\072\067\102\064\103\123\107\030\122\022\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\012\u0223\013\u0221\052\042\064\053\065\115" +
    "\072\067\103\u0117\107\u011a\122\u0222\140\006\142\020\144" +
    "\112\150\036\154\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\013" +
    "\u0226\052\042\064\053\065\115\072\067\103\u0117\107\u011a" +
    "\122\u0222\140\006\142\020\144\112\150\036\154\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\u0229" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\006\225\010\220\011\110\051\134\052\042\055" +
    "\107\057\014\063\015\064\053\065\115\072\067\102\064" +
    "\103\123\104\113\107\030\120\222\121\224\122\022\126" +
    "\130\127\021\130\045\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\100\u01e7" +
    "\144\u01e6\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\051" +
    "\134\052\042\055\107\057\014\063\u023d\064\053\065\115" +
    "\072\067\102\064\103\123\107\030\122\022\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\064" +
    "\317\065\115\067\u0240\070\333\071\330\072\316\103\327" +
    "\140\331\144\112\001\001\000\004\116\u0241\001\001\000" +
    "\004\117\u0245\001\001\000\056\036\u0243\037\u011f\051\u0124" +
    "\052\042\055\107\057\014\063\u0123\064\053\065\115\072" +
    "\067\102\064\103\123\107\030\122\u0120\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\141\u0246" +
    "\001\001\000\002\001\001\000\024\064\317\065\115\067" +
    "\u0248\070\333\071\330\072\316\103\327\140\331\144\112" +
    "\001\001\000\004\116\u0249\001\001\000\002\001\001\000" +
    "\004\131\u024c\001\001\000\004\107\u0253\001\001\000\004" +
    "\132\u024d\001\001\000\002\001\001\000\006\107\u01a2\133" +
    "\u024f\001\001\000\002\001\001\000\004\043\u0251\001\001" +
    "\000\016\044\u01a8\111\u01a9\112\u01b6\114\u01b4\115\u01ad\136" +
    "\u01b1\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\051\134\052\042\055\107\057\014\063\u0255\064\053\065" +
    "\115\072\067\102\064\103\123\107\030\122\022\135\135" +
    "\137\076\140\006\142\020\144\112\146\072\150\036\154" +
    "\047\001\001\000\002\001\001\000\060\006\u0259\011\110" +
    "\026\u0258\051\134\052\042\055\107\057\014\063\015\064" +
    "\053\065\115\072\067\102\064\103\123\107\030\122\022" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\047\001\001\000\004\007\u025a\001\001\000\002" +
    "\001\001\000\002\001\001\000\074\006\225\010\220\011" +
    "\110\051\134\052\042\055\107\057\014\063\015\064\053" +
    "\065\115\072\067\102\064\103\123\104\113\107\030\120" +
    "\222\121\224\122\022\126\130\127\021\130\045\135\135" +
    "\137\076\140\006\142\020\144\112\146\072\150\036\154" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\055\163\056\u0262\103\160\153\164\001\001" +
    "\000\002\001\001\000\012\055\163\056\u0264\103\160\153" +
    "\164\001\001\000\002\001\001\000\004\007\u0266\001\001" +
    "\000\074\006\225\010\220\011\110\051\134\052\042\055" +
    "\107\057\014\063\015\064\053\065\115\072\067\102\064" +
    "\103\123\104\113\107\030\120\222\121\224\122\022\126" +
    "\130\127\021\130\045\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\107\u026a\001\001\000\004" +
    "\144\u026b\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\u026e\001\001\000\074\006\225\010\220\011\110" +
    "\051\134\052\042\055\107\057\014\063\015\064\053\065" +
    "\115\072\067\102\064\103\123\104\113\107\030\120\222" +
    "\121\224\122\022\126\130\127\021\130\045\135\135\137" +
    "\076\140\006\142\020\144\112\146\072\150\036\154\047" +
    "\001\001\000\010\123\u0271\124\u0273\125\u0272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\125\u0274\001\001\000\002\001\001\000\004\107\u0276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u027a\001\001\000\074\006\225\010\220\011" +
    "\110\051\134\052\042\055\107\057\014\063\015\064\053" +
    "\065\115\072\067\102\064\103\123\104\113\107\030\120" +
    "\222\121\224\122\022\126\130\127\021\130\045\135\135" +
    "\137\076\140\006\142\020\144\112\146\072\150\036\154" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\100\u01e7\144\u01e6\001\001\000\002\001" +
    "\001\000\056\047\u0283\050\u0281\051\134\052\042\055\107" +
    "\057\014\063\u0282\064\053\065\115\072\067\102\064\103" +
    "\123\107\030\122\022\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\047\u0285" +
    "\050\u0281\051\134\052\042\055\107\057\014\063\u0282\064" +
    "\053\065\115\072\067\102\064\103\123\107\030\122\022" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\047\001\001\000\002\001\001\000\056\047\u0287" +
    "\050\u0281\051\134\052\042\055\107\057\014\063\u0282\064" +
    "\053\065\115\072\067\102\064\103\123\107\030\122\022" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\047\001\001\000\002\001\001\000\060\006\u028b" +
    "\011\110\017\u0289\051\134\052\042\055\107\057\014\063" +
    "\015\064\053\065\115\072\067\102\064\103\123\107\030" +
    "\122\022\135\135\137\076\140\006\142\020\144\112\146" +
    "\072\150\036\154\047\001\001\000\002\001\001\000\004" +
    "\007\u028c\001\001\000\002\001\001\000\074\006\225\010" +
    "\220\011\110\051\134\052\042\055\107\057\014\063\015" +
    "\064\053\065\115\072\067\102\064\103\123\104\113\107" +
    "\030\120\222\121\224\122\022\126\130\127\021\130\045" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\047\001\001\000\002\001\001\000\052\051\134" +
    "\052\042\055\107\057\014\063\u028f\064\053\065\115\072" +
    "\067\102\064\103\123\107\030\122\022\135\135\137\076" +
    "\140\006\142\020\144\112\146\072\150\036\154\047\001" +
    "\001\000\002\001\001\000\014\064\317\065\115\072\316" +
    "\140\u011c\144\112\001\001\000\002\001\001\000\032\052" +
    "\042\064\053\065\115\072\067\103\u0117\107\u011a\122\u0293" +
    "\140\006\142\020\144\112\150\036\154\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\051\134\052\042\055\107\057\014" +
    "\063\u02a5\064\053\065\115\072\067\075\u02a2\076\u02a3\102" +
    "\064\103\123\107\030\122\022\135\135\137\076\140\006" +
    "\142\020\144\112\146\072\150\036\154\047\001\001\000" +
    "\002\001\001\000\004\061\u02ac\001\001\000\034\052\042" +
    "\064\053\065\115\072\067\103\u0117\106\u02aa\107\u011a\122" +
    "\u0126\140\006\142\020\144\112\150\036\154\047\001\001" +
    "\000\002\001\001\000\052\051\134\052\042\055\107\057" +
    "\014\063\u02a8\064\053\065\115\072\067\102\064\103\123" +
    "\107\030\122\022\135\135\137\076\140\006\142\020\144" +
    "\112\146\072\150\036\154\047\001\001\000\034\052\042" +
    "\064\053\065\115\072\067\103\u0117\106\u02a9\107\u011a\122" +
    "\u0126\140\006\142\020\144\112\150\036\154\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\051\134\052\042\055\107\057\014\063\u02ae\064\053" +
    "\065\115\072\067\102\064\103\123\107\030\122\022\135" +
    "\135\137\076\140\006\142\020\144\112\146\072\150\036" +
    "\154\047\001\001\000\002\001\001\000\034\052\042\064" +
    "\053\065\115\072\067\103\u0117\106\u02b3\107\u011a\122\u0126" +
    "\140\006\142\020\144\112\150\036\154\047\001\001\000" +
    "\002\001\001\000\052\051\134\052\042\055\107\057\014" +
    "\063\u02b1\064\053\065\115\072\067\102\064\103\123\107" +
    "\030\122\022\135\135\137\076\140\006\142\020\144\112" +
    "\146\072\150\036\154\047\001\001\000\034\052\042\064" +
    "\053\065\115\072\067\103\u0117\106\u02b2\107\u011a\122\u0126" +
    "\140\006\142\020\144\112\150\036\154\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\052" +
    "\042\064\053\065\115\072\067\103\u0117\107\u011a\122\u02ba" +
    "\135\u02b9\140\006\142\020\144\112\150\036\154\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\051\134\052\042\055\107\057\014\063\u02bc\064" +
    "\053\065\115\072\067\102\064\103\123\107\030\122\022" +
    "\135\135\137\076\140\006\142\020\144\112\146\072\150" +
    "\036\154\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\u02c0\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\036\u02c2\037\u011f\051\u0124\052\042\055\107" +
    "\057\014\063\u0123\064\053\065\115\072\067\102\064\103" +
    "\123\107\030\122\u0120\135\135\137\076\140\006\142\020" +
    "\144\112\146\072\150\036\154\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PhpAstParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PhpAstParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PhpAstParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	protected final static Integer PUBLIC = new Integer(Modifiers.AccPublic);
	protected final static Integer PRIVATE = new Integer(Modifiers.AccPrivate);
	protected final static Integer PROTECTED = new Integer(Modifiers.AccProtected);
	protected final static Integer ABSTRACT = new Integer(Modifiers.AccAbstract);
	protected final static Integer FINAL = new Integer(Modifiers.AccFinal);
	protected final static Integer STATIC = new Integer(Modifiers.AccStatic);
	
	public Dispatch createDispatch(VariableBase dispatcher, VariableBase property) {
		Dispatch dispatch = null;
		if (property instanceof Variable) {
			dispatch = new FieldAccess(dispatcher.getStart(), property.getEnd(), ast, dispatcher, (Variable)property);
		} else if (property instanceof FunctionInvocation) {
			dispatch = new MethodInvocation(dispatcher.getStart(), property.getEnd(), ast ,dispatcher, (FunctionInvocation)property);
		} else {
			throw new IllegalArgumentException();
		}
		return dispatch;
	}
}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"unchecked", "nls", "unused", "rawtypes"})
class CUP$PhpAstParser$actions {
  private final PhpAstParser parser;

  /** Constructor */
  CUP$PhpAstParser$actions(PhpAstParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action(
    int                        CUP$PhpAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
    java.util.Stack            CUP$PhpAstParser$stack,
    int                        CUP$PhpAstParser$top)
    throws java.lang.Exception
    {
      if (CUP$PhpAstParser$act_num < 100) {
        return CUP$PhpAstParser$do_action1(
             CUP$PhpAstParser$act_num, CUP$PhpAstParser$parser,CUP$PhpAstParser$stack,CUP$PhpAstParser$top);
      }
      else       if (CUP$PhpAstParser$act_num < 200) {
        return CUP$PhpAstParser$do_action2(
             CUP$PhpAstParser$act_num, CUP$PhpAstParser$parser,CUP$PhpAstParser$stack,CUP$PhpAstParser$top);
      }
      else       if (CUP$PhpAstParser$act_num < 300) {
        return CUP$PhpAstParser$do_action3(
             CUP$PhpAstParser$act_num, CUP$PhpAstParser$parser,CUP$PhpAstParser$stack,CUP$PhpAstParser$top);
      }
      else  {
        return CUP$PhpAstParser$do_action4(
             CUP$PhpAstParser$act_num, CUP$PhpAstParser$parser,CUP$PhpAstParser$stack,CUP$PhpAstParser$top);
      }
    }


  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action1(
    int                        CUP$PhpAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
    java.util.Stack            CUP$PhpAstParser$stack,
    int                        CUP$PhpAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PhpAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PhpAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              Program RESULT = null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	PhpAstLexer phpAstLexer = (PhpAstLexer) parser.getScanner();
	List commentList = phpAstLexer.getCommentList();
	Program program = new Program(statementListleft, statementListright, parser.ast, statementList, commentList);
	RESULT = program; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(1/*thestart*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		RESULT = start_val;
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$PhpAstParser$parser.done_parsing();
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top_statement_list ::= top_statement_list top_statement 
            {
              List RESULT = null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	if(statement != null) {
		statementList.add(statement);
	}		
	RESULT = statementList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(2/*top_statement_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // top_statement_list ::= 
            {
              List RESULT = null;
		 
	RESULT = new LinkedList(); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(2/*top_statement_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // top_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(3/*top_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // top_statement ::= function_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(3/*top_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // top_statement ::= class_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(3/*top_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	// Note: we never generate T_HALT_COMPILER
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(3/*top_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT = null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	// Ignore null statements
	if(statement != null) {
		statementList.add(statement);
	}		
	RESULT = statementList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(5/*inner_statement_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inner_statement_list ::= 
            {
              List RESULT = null;
		 
	RESULT = new LinkedList(); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(5/*inner_statement_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inner_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(6/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(6/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(6/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		 
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(6/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= unticked_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(4/*statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // unticked_statement ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(tokenleft, endright, parser.ast, statementList);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, parser.ast, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, parser.ast, condition, iftrue, falseStatement);		
	
	RESULT = ifStatement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, parser.ast, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, parser.ast, ifTrueStatementList, false);
	IfStatement ifStatement = new IfStatement(tokenleft, endright, parser.ast, condition, block, falseStatement);		
	
	RESULT = ifStatement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, parser.ast, expr, statement);			
	RESULT = whileStatement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, parser.ast, expr, statement);			
	RESULT = doStatement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
				
	ForStatement forStatement = new ForStatement(tokenleft, statementright, parser.ast, initializations, conditions, increasements, statement);			
	RESULT = forStatement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, parser.ast, expr, caseBlock);
	RESULT = switchStatement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new BreakStatement(tokenleft, endright, parser.ast); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new BreakStatement(tokenleft, endright, parser.ast, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright, parser.ast); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright, parser.ast, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, parser.ast); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, parser.ast, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, parser.ast, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	GlobalStatement  global = new GlobalStatement(startleft, endright, parser.ast, list);
	RESULT = global;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	StaticStatement s = new StaticStatement(startleft, endright, parser.ast, list);
	RESULT = s;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new EchoStatement(startleft, endright, parser.ast, exprList); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT = null;
		int htmlleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int htmlright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object html = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	InLineHtml inLineHtml = new InLineHtml(htmlleft, htmlright, parser.ast);
	RESULT = inLineHtml;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, parser.ast, expr);
	RESULT = expressionStatement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(expr);
	Identifier id = new Identifier(startleft, startright, parser.ast, "use");
	FunctionName functionName = new FunctionName(startleft, startright, parser.ast, id);
	FunctionInvocation functionInvocation = new FunctionInvocation(startleft, exprright, parser.ast, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, parser.ast, functionInvocation);
	RESULT = expressionStatement;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Identifier id = new Identifier(startleft, startright, parser.ast, "unset");
	FunctionName functionName = new FunctionName(startleft, startright, parser.ast, id);
	FunctionInvocation functionInvocation = new FunctionInvocation(startleft, closeParright, parser.ast, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, parser.ast, functionInvocation);
	RESULT = expressionStatement;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	DeclareStatement declare = new DeclareStatement(startleft, statementright, parser.ast, lists[0], lists[1], statement);
	RESULT = declare;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new EmptyStatement(tokenleft, tokenright, parser.ast); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-12)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-12)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-12)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-11)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-11)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-11)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-10)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-10)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-10)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-9)).value;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, parser.ast, tryList);
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, parser.ast, catchList);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, parser.ast, className, var, catchBlock);
	((LinkedList) catchesList).addFirst(catchClause);
	TryStatement tryStatement = new TryStatement(startleft, catchesListright, parser.ast, tryBlock, catchesList);
	RESULT = tryStatement;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-12)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new ThrowStatement(tokenleft, endright, parser.ast, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unticked_statement ::= error 
            {
              Statement RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ASTError error = new ASTError(theErrorleft, theErrorright, parser.ast);
	RESULT = error;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unticked_statement ::= T_VAR_COMMENT unticked_statement 
            {
              Statement RESULT = null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(7/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // additional_catches ::= non_empty_additional_catches 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(81/*additional_catches*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // additional_catches ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(81/*additional_catches*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // non_empty_additional_catches ::= additional_catch 
            {
              List RESULT = null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(82/*non_empty_additional_catches*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(catch_statement);
	RESULT = list;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(82/*non_empty_additional_catches*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT = null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, parser.ast, catchList);
	Variable variable = new Variable(varleft, varright, parser.ast, var);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, parser.ast, className, variable, catchBlock);
	RESULT = catchClause;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(83/*additional_catch*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unset_variables ::= unset_variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(8/*unset_variables*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(8/*unset_variables*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unset_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(9/*unset_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*use_filename*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Scalar s = new Scalar(startleft, endright, parser.ast, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(10/*use_filename*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              FunctionDeclaration RESULT = null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		FunctionDeclaration functionDeclaration = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = functionDeclaration;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(78/*function_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT = null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = classDeclaration;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(79/*class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // is_reference ::= 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.FALSE;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(35/*is_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.TRUE;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(35/*is_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              FunctionDeclaration RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Identifier functionId = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	Block block = new Block(blockStartleft, blockEndright, parser.ast, statementList);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, blockEndright, parser.ast, functionId, paramList, block, isReference.booleanValue());
	RESULT = functionDeclaration;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(84/*unticked_function_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Identifier superClass = (Identifier)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Identifier classId = new Identifier(classNameleft, classNameright, parser.ast, className);
	Block block = new Block(blockStartleft, blockEndright, parser.ast, statementList);
	ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft ,blockEndright, parser.ast, modifier.intValue(), classId, superClass, interfaces, block);
	RESULT = classDeclaration;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(85/*unticked_class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Integer start = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Identifier classId = new Identifier(classNameleft, classNameright, parser.ast, className);
	Block block = new Block(blockStartleft, blockEndright, parser.ast, statementList);
	InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(startleft ,blockEndright, parser.ast, classId, interfaces, block);
	RESULT = interfaceDeclaration;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(85/*unticked_class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // class_entry_type ::= T_CLASS 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_NONE);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(86/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_ABSTRACT);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(86/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // class_entry_type ::= T_FINAL T_CLASS 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_FINAL);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(86/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // extends_from ::= 
            {
              Identifier RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(87/*extends_from*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              Identifier RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = className;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(87/*extends_from*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // interface_entry ::= T_INTERFACE 
            {
              Integer RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(66/*interface_entry*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // interface_extends_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(67/*interface_extends_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(67/*interface_extends_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // implements_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(88/*implements_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(88/*implements_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(className);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(89/*interface_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(className);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(89/*interface_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // foreach_optional_arg ::= 
            {
              Expression RESULT = null;
		 
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(11/*foreach_optional_arg*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(11/*foreach_optional_arg*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // foreach_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(12/*foreach_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	Reference reference = new Reference (startleft, varright, parser.ast, var);
	RESULT = reference;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(12/*foreach_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // for_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(13/*for_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(13/*for_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // foreach_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(14/*foreach_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(14/*foreach_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declare_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(15/*declare_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(15/*declare_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();
	
	Identifier id = new Identifier(keyleft, keyright, parser.ast, key);
	listKeys.add(id);
	listValues.add(value);

	List[] returnList = new List[] { listKeys, listValues };
	RESULT = returnList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(16/*declare_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT = null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Identifier id = new Identifier(keyleft, keyright, parser.ast, key);
	lists[0].add(id);
	lists[1].add(value);
	RESULT = lists;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(16/*declare_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList);	
	RESULT = block; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(17/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList);	
	RESULT = block; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(17/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList, false);	
	RESULT = block; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(17/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList, false);	
	RESULT = block; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(17/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // case_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(18/*case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT = null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, parser.ast, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(18/*case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT = null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, parser.ast, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(18/*case_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(19/*case_separator*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(19/*case_separator*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // while_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(20/*while_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE 
            {
              Statement RESULT = null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(colonleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(20/*while_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // elseif_list ::= 
            {
              List[] RESULT = null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(21/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT = null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
			
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(iftrue);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(21/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // new_elseif_list ::= 
            {
              List[] RESULT = null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(22/*new_elseif_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT = null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
			
	Block block = new Block(colonleft, statementListright, parser.ast, statementList, false);
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(block);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(22/*new_elseif_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action2(
    int                        CUP$PhpAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
    java.util.Stack            CUP$PhpAstParser$stack,
    int                        CUP$PhpAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PhpAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PhpAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // else_single ::= 
            {
              Statement RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(23/*else_single*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // else_single ::= T_ELSE statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(23/*else_single*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // new_else_single ::= 
            {
              Statement RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(24/*new_else_single*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT = null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(colonleft, statementListright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(24/*new_else_single*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(25/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parameter_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(25/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // non_empty_parameter_list ::= parameter 
            {
              List RESULT = null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(parameter);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(26/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(parameter);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(26/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int start = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	FormalParameter parameter = new FormalParameter(start, varright, parser.ast, classType, v);
	RESULT = parameter;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(27/*parameter*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int start = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Reference ref_var = new Reference (refleft, varright, parser.ast, v);
	FormalParameter parameter = new FormalParameter(start, varright, parser.ast, classType, ref_var);
	RESULT = parameter;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(27/*parameter*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int start = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	FormalParameter parameter = new FormalParameter(start, scalarright, parser.ast, classType, v, scalar);
	RESULT = parameter;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(27/*parameter*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int start = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Reference ref_var = new Reference (refleft, varright, parser.ast, v);
	FormalParameter parameter = new FormalParameter(start, scalarright, parser.ast, classType, ref_var, scalar);
	RESULT = parameter;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(27/*parameter*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // optional_class_type ::= 
            {
              Identifier RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(90/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // optional_class_type ::= T_STRING 
            {
              Identifier RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Identifier classId = new Identifier(classNameleft, classNameright, parser.ast, className);
	RESULT = classId;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(90/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // optional_class_type ::= T_ARRAY 
            {
              Identifier RESULT = null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Identifier classId = new Identifier(arrayleft, arrayright, parser.ast, "array");
	RESULT = classId;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(90/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(28/*function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // function_call_parameter_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(28/*function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(29/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // non_empty_function_call_parameter_list ::= variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(29/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              List RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List paramsList = new LinkedList();
	Expression var_ref = new Reference(startleft, varright, parser.ast, var);
	paramsList.add(var_ref);	
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(29/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(29/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(29/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Expression var_ref = new Reference(startleft, varright, parser.ast, var);
	paramsList.add(var_ref);	
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(29/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(30/*global_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // global_var_list ::= global_var 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(30/*global_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // global_var ::= T_VARIABLE 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable variable = new Variable(varleft, varright, parser.ast, var);
	RESULT = variable;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(31/*global_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // global_var ::= T_DOLLAR r_variable 
            {
              VariableBase RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ReflectionVariable ref = new ReflectionVariable(startleft, varright, parser.ast, var);
	RESULT = ref;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(31/*global_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ReflectionVariable var = new ReflectionVariable(startleft, endright, parser.ast, varName);
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(31/*global_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var); 
	list.add(v);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(32/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var); 
	Assignment assignment = new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr); 
	list.add(assignment);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(32/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // static_var_list ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var); 
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(32/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var); 
	Assignment assignment = new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr); 
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(32/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // class_statement_list ::= class_statement_list class_statement 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement classStatement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(classStatement);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(33/*class_statement_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // class_statement_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(33/*class_statement_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Statement RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	FieldsDeclaration fieldsDeclaration = new FieldsDeclaration(modifierleft, endright, parser.ast, modifier.intValue(), decList);
	RESULT = fieldsDeclaration;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(34/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // class_statement ::= class_constant_declaration T_SEMICOLON 
            {
              Statement RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ConstantDeclaration classConstantDeclaration = new ConstantDeclaration(listleft, endright, parser.ast, list);
	RESULT = classConstantDeclaration;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(34/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body 
            {
              Statement RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int methodStart = modifier == null ? startleft : modifierleft;
	modifier = modifier == null ? PhpAstParser.PUBLIC : modifier;
	Identifier functionId = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, bodyright, parser.ast, functionId, paramList, body, isReference.booleanValue());
	MethodDeclaration methodDeclaration = new MethodDeclaration(methodStart, bodyright, parser.ast, modifier.intValue(), functionDeclaration, true);
	RESULT = methodDeclaration;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(34/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // class_statement ::= T_VAR_COMMENT unticked_statement 
            {
              Statement RESULT = null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(34/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // method_body ::= T_SEMICOLON 
            {
              Block RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(73/*method_body*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList);
	RESULT = block;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(73/*method_body*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // variable_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		Integer modifier = (Integer)it.next();
		result |= modifier.intValue();
	}
	RESULT = new Integer(result);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(92/*variable_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // variable_modifiers ::= T_VAR 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.PUBLIC;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(92/*variable_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // method_modifiers ::= 
            {
              Integer RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(72/*method_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // method_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		Integer modifier = (Integer)it.next();
		result |= modifier.intValue();
	}
	RESULT = new Integer(result);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(72/*method_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(74/*non_empty_member_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(74/*non_empty_member_modifiers*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // member_modifier ::= T_PUBLIC 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.PUBLIC;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(75/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // member_modifier ::= T_PROTECTED 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.PROTECTED;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(75/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // member_modifier ::= T_PRIVATE 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.PRIVATE;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(75/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // member_modifier ::= T_STATIC 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.STATIC;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(75/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // member_modifier ::= T_ABSTRACT 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.ABSTRACT;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(75/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // member_modifier ::= T_FINAL 
            {
              Integer RESULT = null;
		
	RESULT = PhpAstParser.FINAL;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(75/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(70/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(70/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(70/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(70/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // class_constant_declaration ::= class_constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Identifier constId = new Identifier(constNameleft, constNameright, parser.ast, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(71/*class_constant_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // class_constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT = null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	Identifier constId = new Identifier(constNameleft, constNameright, parser.ast, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(71/*class_constant_declaration*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(36/*echo_expr_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // echo_expr_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(36/*echo_expr_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // for_expr ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(37/*for_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // for_expr ::= non_empty_for_expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = exprList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(37/*for_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(38/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // non_empty_for_expr ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(38/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ListVariable vars = new ListVariable(startleft, closeright, parser.ast, varList);
	Assignment list = new Assignment(startleft, exprright, parser.ast, vars, Assignment.OP_EQUAL, expr);
	RESULT = list; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase refvar = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, refvarright, parser.ast, var, Assignment.OP_EQUAL, new Reference(reftokenleft, refvarright, parser.ast, refvar)); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, parser.ast, className, ctor);
	Reference reference = new Reference(reftokenleft, ctorright, parser.ast, classInstanceCreation);
	Assignment assignment = new Assignment(varleft, ctorright, parser.ast, var, Assignment.OP_EQUAL, reference);
	RESULT = assignment;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expr_without_variable ::= T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, parser.ast, className, ctor);
	RESULT = classInstanceCreation;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	CloneExpression clone = new CloneExpression(startleft, exprright, parser.ast, expr);
	RESULT = clone;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_PLUS_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_MINUS_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_MUL_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 	
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_DIV_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_CONCAT_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_MOD_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_AND_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_OR_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_XOR_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_SL_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_SR_EQUAL, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var , PostfixExpression.OP_INC); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var , PrefixExpression.OP_INC); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var , PostfixExpression.OP_DEC); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var , PrefixExpression.OP_DEC); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_BOOL_OR, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_BOOL_AND, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_STRING_OR, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_STRING_AND, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_STRING_XOR, expr2);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_OR, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_AND, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_XOR, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_CONCAT, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_PLUS, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_MINUS, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_MUL, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_DIV, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_MOD, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_SL, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action3(
    int                        CUP$PhpAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
    java.util.Stack            CUP$PhpAstParser$stack,
    int                        CUP$PhpAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PhpAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PhpAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_SR, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_PLUS); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_MINUS); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_NOT); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_TILDA); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_IDENTICAL, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_NOT_IDENTICAL, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_EQUAL, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_NOT_EQUAL, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_RGREATER, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_LGREATER, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new InstanceOfExpression(exprleft, classNameright, parser.ast, expr , className); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ParenthesisExpression parenthesisExpression = new ParenthesisExpression(startleft, endright, parser.ast, expr);
	RESULT = parenthesisExpression; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT = null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, parser.ast, condition , ifTrue, ifFalse); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = expr;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_INT); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_REAL); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_STRING); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_ARRAY); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_OBJECT); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_BOOL); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_UNSET); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	Identifier id = new Identifier(startleft, startright, parser.ast, start);
	FunctionName name = new FunctionName(startleft, startright, parser.ast, id);
	FunctionInvocation result = new FunctionInvocation(startleft, exprright, parser.ast, name, expList);
	RESULT = result;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, parser.ast, expr);
	RESULT = ignoreError;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expr_without_variable ::= scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = scalar; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Expression expr = new ArrayCreation(startleft, endright, parser.ast, list);
	RESULT = expr;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expr_without_variable ::= T_BACKQUATE encaps_list T_BACKQUATE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, parser.ast, list);
	RESULT = backTickExpression;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	Identifier id = new Identifier(startleft, startright, parser.ast, "print");
	FunctionName name = new FunctionName(startleft, startright, parser.ast, id);
	FunctionInvocation result = new FunctionInvocation(startleft, exprright, parser.ast, name, expList);
	RESULT = result;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(39/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // function_call ::= string_st T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	Identifier name = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	FunctionName fName = new FunctionName(functionNameleft, functionNameright, parser.ast, name);
	RESULT = new FunctionInvocation(functionNameleft, endright, parser.ast, fName, parameters); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(40/*function_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	Identifier name = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	FunctionName fName = new FunctionName(functionNameleft, functionNameright, parser.ast, name);
	FunctionInvocation functionInvocation = new FunctionInvocation(functionNameleft, endright, parser.ast, fName, parameters); 
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, parser.ast, className, functionInvocation); 
	RESULT = staticMethodInvocation;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(40/*function_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	FunctionName functionName = new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, reflectionName);
	FunctionInvocation functionInvocation = new FunctionInvocation(reflectionNameleft, endright, parser.ast, functionName, parameters); 
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, parser.ast, className, functionInvocation); 
	RESULT = staticMethodInvocation;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(40/*function_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	FunctionName functionName = new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, reflectionName); 
	RESULT = new FunctionInvocation(reflectionNameleft, endright, parser.ast, functionName, parameters); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(40/*function_call*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // fully_qualified_class_name ::= T_STRING 
            {
              Identifier RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Identifier name = new Identifier(classNameleft, classNameright, parser.ast, className);
	RESULT = name;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(69/*fully_qualified_class_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // class_name_reference ::= T_STRING 
            {
              ClassName RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Identifier name = new Identifier(classNameleft, classNameright, parser.ast, className);
	RESULT = new ClassName(classNameleft, classNameright, parser.ast, name);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(99/*class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // class_name_reference ::= dynamic_class_name_reference 
            {
              ClassName RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = className;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(99/*class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties 
            {
              ClassName RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int firstVarPropertyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int firstVarPropertyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase firstVarProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Dispatch dispatch = null;
	VariableBase dispatcher = var;
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		VariableBase property = (VariableBase)listIt.next();
		dispatch = parser.createDispatch(dispatcher, property);
		dispatcher = dispatch;
	}	
	
	// create class name from the dispatch
	ClassName name = new ClassName(varleft, propertyListright, parser.ast, dispatch);
	RESULT = name;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(101/*dynamic_class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // dynamic_class_name_reference ::= base_variable 
            {
              ClassName RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	 ClassName name = new ClassName(varleft, varright, parser.ast, var);
	 RESULT = name;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(101/*dynamic_class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties dynamic_class_name_variable_property 
            {
              List RESULT = null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	variables.add(var);
	RESULT = variables;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(103/*dynamic_class_name_variable_properties*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // dynamic_class_name_variable_properties ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(103/*dynamic_class_name_variable_properties*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // dynamic_class_name_variable_property ::= T_OBJECT_OPERATOR object_property 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(104/*dynamic_class_name_variable_property*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // exit_expr ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = expr;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(41/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // ctor_arguments ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(42/*ctor_arguments*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = paramsList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(42/*ctor_arguments*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // common_scalar ::= T_LNUMBER 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_INT);
	RESULT = s;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(43/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // common_scalar ::= T_DNUMBER 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_REAL);
	RESULT = s;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(43/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(43/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // common_scalar ::= T_LINE 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(43/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // common_scalar ::= T_FILE 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(43/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // common_scalar ::= T_CLASS_C 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(43/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // common_scalar ::= T_METHOD_C 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, "__METHOD__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(43/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // common_scalar ::= T_FUNC_C 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(43/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // static_scalar ::= common_scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = scalar;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // static_scalar ::= string_st 
            {
              Expression RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Scalar s = new Scalar(strleft, strright, parser.ast, str, Scalar.TYPE_STRING);
	RESULT = s;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, parser.ast, expr, UnaryOperation.OP_PLUS);
	RESULT = op;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, parser.ast, expr, UnaryOperation.OP_MINUS);
	RESULT = op;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ArrayCreation array = new ArrayCreation(startleft, endright, parser.ast, list);
	RESULT = array;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // static_scalar ::= static_class_constant 
            {
              Expression RESULT = null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = classConstant;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(44/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // static_class_constant ::= T_STRING T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Identifier vname = new Identifier(varNameleft, varNameright, parser.ast, varName);
	Identifier cname = new Identifier(classNameleft, classNameright, parser.ast, className);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, parser.ast, cname, vname); 
	RESULT = constant;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(105/*static_class_constant*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // scalar ::= string_st 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // scalar ::= T_STRING_VARNAME 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	// TODO: check if this is a scalar
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // scalar ::= class_constant 
            {
              Expression RESULT = null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = classConstant;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // scalar ::= common_scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = scalar;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Quote quote = new Quote(startleft, endright, parser.ast, list, Quote.QT_QUOTE);
	RESULT = quote;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Quote hereDoc = new Quote(startleft, endright, parser.ast, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(45/*scalar*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // static_array_pair_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(46/*static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(46/*static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // possible_comma ::= 
            {
              Object RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(47/*possible_comma*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // possible_comma ::= T_COMMA 
            {
              Object RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(47/*possible_comma*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, parser.ast, key, value);
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(valueleft, valueright, parser.ast, value);
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, parser.ast, key, value);
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(valueleft, valueright, parser.ast, value);
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(48/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // expr ::= r_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(49/*expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // expr ::= expr_without_variable 
            {
              Expression RESULT = null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = ewv; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(49/*expr*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // r_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(91/*r_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // w_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(68/*w_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // rw_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(93/*rw_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // variable ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not variable_properties 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	// get the last property 
	VariableBase firstVarProperty = null;
	if (paramsList == null) {
		firstVarProperty = memberProperty;
	} else {
		FunctionName functionName = new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty);
		firstVarProperty = new FunctionInvocation(memberPropertyleft, paramsListright, parser.ast, functionName, paramsList);
	}

	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Dispatch dispatch = null;
	VariableBase dispatcher = var;
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		VariableBase property = (VariableBase)listIt.next();
		dispatch = parser.createDispatch(dispatcher, property);
		dispatcher = dispatch;
	}	
	RESULT = dispatch;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(80/*variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // variable ::= base_variable_with_function_calls 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(80/*variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // variable_properties ::= variable_properties variable_property 
            {
              List RESULT = null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int variablePropertyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int variablePropertyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase variableProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	variables.add(variableProperty);
	RESULT = variables;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(77/*variable_properties*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // variable_properties ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(77/*variable_properties*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // variable_property ::= T_OBJECT_OPERATOR object_property method_or_not 
            {
              VariableBase RESULT = null;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	VariableBase result = null;
	if (paramsList == null) {
		result = memberProperty;
	} else {
		FunctionName functionName = new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty);
		result = new FunctionInvocation(memberPropertyleft, paramsListright, parser.ast, functionName, paramsList);
	}
	RESULT = result;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(95/*variable_property*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // method_or_not ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = paramsList;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(76/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // method_or_not ::= 
            {
              List RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(76/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // variable_without_objects ::= reference_variable 
            {
              Variable RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(94/*variable_without_objects*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Variable RESULT = null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Variable finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);				
	}
	RESULT = finalVar;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(94/*variable_without_objects*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // static_member ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, varright, parser.ast, className, var);
	RESULT = staticFieldAccess;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(96/*static_member*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // base_variable_with_function_calls ::= base_variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(106/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // base_variable_with_function_calls ::= function_call 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(106/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // base_variable ::= reference_variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(102/*base_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // base_variable ::= simple_indirect_reference reference_variable 
            {
              VariableBase RESULT = null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	VariableBase finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);				
	}
	RESULT = finalVar;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(102/*base_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // base_variable ::= static_member 
            {
              VariableBase RESULT = null;
		int staticFieldAccessleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int staticFieldAccessright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase staticFieldAccess = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = staticFieldAccess;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(102/*base_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Variable RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable var = new ArrayAccess(varNameleft, endright, parser.ast, varName, index, ArrayAccess.VARIABLE_ARRAY);
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(50/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable var = new ArrayAccess(varNameleft, endright, parser.ast, varName, index, ArrayAccess.VARIABLE_HASHTABLE);
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(50/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // reference_variable ::= compound_variable 
            {
              Variable RESULT = null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable comp_var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = comp_var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(50/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // compound_variable ::= tracked_variable 
            {
              Variable RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(51/*compound_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action4(
    int                        CUP$PhpAstParser$act_num,
    java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
    java.util.Stack            CUP$PhpAstParser$stack,
    int                        CUP$PhpAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PhpAstParser$result;

      /* select the action based on the action number */
      switch (CUP$PhpAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ReflectionVariable var = new ReflectionVariable(startleft, endright, parser.ast, expr);
	RESULT = var;	 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(51/*compound_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // dim_offset ::= 
            {
              Expression RESULT = null;
		 
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(52/*dim_offset*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // dim_offset ::= expr 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = expr; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(52/*dim_offset*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // object_property ::= object_dim_list 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(53/*object_property*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // object_property ::= variable_without_objects 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(53/*object_property*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable varArray = new ArrayAccess(varleft, endright, parser.ast, var, index, ArrayAccess.VARIABLE_ARRAY);
	RESULT = varArray;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(54/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable varArray = new ArrayAccess(varleft, endright, parser.ast, var, index, ArrayAccess.VARIABLE_HASHTABLE);
	RESULT = varArray;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(54/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // object_dim_list ::= variable_name 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = var; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(54/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // variable_name ::= string_st 
            {
              VariableBase RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(55/*variable_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new ReflectionVariable(startleft, endright, parser.ast, expr); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(55/*variable_name*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(1);

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(56/*simple_indirect_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT = null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = new Integer(1 + ref.intValue());

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(56/*simple_indirect_reference*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT = null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase element = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	if (element != null) {
		listElements.add(element);
	} else {
		listElements.add(new Variable(elementleft, elementright, parser.ast, ""));
	}	
	RESULT = listElements;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(57/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // assignment_list ::= assignment_list_element 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);	
	} else {
		listElements.add(new Variable(varleft, varright, parser.ast, ""));
	}
	RESULT = listElements;
	;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(57/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // assignment_list_element ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(58/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ListVariable vars = new ListVariable(startleft, endright, parser.ast, varList);
	RESULT = vars;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(58/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // assignment_list_element ::= 
            {
              VariableBase RESULT = null;
		
	RESULT = null;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(58/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // array_pair_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(59/*array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(59/*array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, parser.ast, key, value);
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(60/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, parser.ast, expr);
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(60/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, parser.ast, key, value);
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(60/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // non_empty_array_pair_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, parser.ast, expr);
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(60/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Reference value = new Reference(startleft, varright, parser.ast, var);
	ArrayElement element = new ArrayElement(keyleft, varright, parser.ast, key, value);	
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(60/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Reference ref = new Reference(startleft, varright, parser.ast, var);
	ArrayElement element = new ArrayElement(startleft, varright, parser.ast, ref);	
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(60/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	Reference value = new Reference(startleft, varright, parser.ast, var);
	ArrayElement element = new ArrayElement(keyleft, varright, parser.ast, key, value);	
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(60/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	Reference ref = new Reference(startleft, varright, parser.ast, var);
	ArrayElement element = new ArrayElement(startleft, varright, parser.ast, ref);	
	list.add(element);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(60/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(61/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(61/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // encaps_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(61/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // encaps_var ::= tracked_variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(62/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              VariableBase RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable var = new ArrayAccess(varNameleft, endright, parser.ast, varName, index, ArrayAccess.VARIABLE_ARRAY);
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(62/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable property = new Variable(stringleft, stringright, parser.ast, string);
	Dispatch dispatch = parser.createDispatch(var, property);
	RESULT = dispatch;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(62/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ReflectionVariable var = new ReflectionVariable(startleft, endright, parser.ast, expr);
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(62/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Variable var = new Variable(varNameleft, varNameright, parser.ast, varName);
	Variable indexedVar = new ArrayAccess(startleft, endright, parser.ast, var, index, ArrayAccess.VARIABLE_ARRAY);
	RESULT = indexedVar;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(62/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	ReflectionVariable ref = new ReflectionVariable(startleft, endright, parser.ast, var);
	RESULT = ref;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(62/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // encaps_var_offset ::= string_st 
            {
              Expression RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Identifier id = new Identifier(stringleft, stringright, parser.ast, string);
	RESULT = id;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(63/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Scalar scalar = new Scalar(numleft,numright, parser.ast, num, Scalar.TYPE_REAL);
	RESULT = scalar;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(63/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = var;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(63/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Identifier id = new Identifier(startleft, startright, parser.ast, "isset");
	FunctionName name = new FunctionName(startleft, startright, parser.ast, id);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, parser.ast, name, varList);
	RESULT = result;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(64/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Identifier id = new Identifier(startleft, startright, parser.ast, "empty");
	FunctionName name = new FunctionName(startleft, startright, parser.ast, id);
	LinkedList varList = new LinkedList();
	varList.add(var);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, parser.ast, name, varList);
	RESULT = result;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(64/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE);
	RESULT = result;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(64/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(64/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Identifier id = new Identifier(startleft, startright, parser.ast, "eval");
	FunctionName name = new FunctionName(startleft, startright, parser.ast, id);
	LinkedList exprList = new LinkedList();
	exprList.add(expr);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, parser.ast, name, exprList);
	RESULT = result;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(64/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE);
	RESULT = result;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(64/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE_ONCE);
	RESULT = result;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(64/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // isset_variables ::= variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;	

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(97/*isset_variables*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // isset_variables ::= isset_variables T_COMMA variable 
            {
              List RESULT = null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	varList.add(var);
	RESULT = varList;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(97/*isset_variables*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // class_constant ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	Identifier name = new Identifier(varNameleft, varNameright, parser.ast, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className, name); 
	RESULT = constant;

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(100/*class_constant*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // tracked_variable ::= T_VARIABLE 
            {
              Variable RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName); 

              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(98/*tracked_variable*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // string_st ::= T_STRING 
            {
              String RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = value; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(65/*string_st*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // string_st ::= T_DEFINE 
            {
              String RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).value;
		 RESULT = value; 
              CUP$PhpAstParser$result = new java_cup.runtime.Symbol(65/*string_st*/, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top-0)).right, RESULT);
            }
          return CUP$PhpAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

