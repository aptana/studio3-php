<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================
     April 20, 2009 2:43:07 PM

     PHP Tests
     Tests the PHP feature

     cwilliams
     ====================================================================== -->
<project name="PHP" default="test" xmlns:jacoco="antlib:org.jacoco.ant">
	<description>
            Tests the PHP feature
    </description>

	<property file="build_local.properties" />
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${basedir}/ant-contrib/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<!-- Set up JACOCO location and instrumentation path -->
	<path id="jacoco.lib">
		<pathelement location="lib/jacocoagent.jar" />
		<pathelement location="lib/jacocoant.jar" />
	</path>
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath refid="jacoco.lib" />
	</taskdef>

	<path id="instrument.classpath">
		<fileset dir="${baseLocation}/plugins">
			<include name="com.aptana.editor.php*" />
			<include name="com.aptana.php*" />
		</fileset>
	</path>
	<path id="source.path">
		<dirset dir="${buildDirectory}/plugins">
			<include name="*/src" />
		</dirset>
	</path>

	<!-- =================================
          target: build
         ================================= -->
	<target name="build" description="Builds the PHP Test feature" depends="generate.build.properties,generate.base">
		<java jar="${baseLocation}/plugins/${launcher.plugin}.jar" fork="true" failonerror="yes">
			<arg line="-application org.eclipse.ant.core.antRunner -buildfile ${baseLocation}/plugins/${builder.plugin}/scripts/build.xml -Dbuilder=${basedir} -Dbuild.revision=${build.revision} -nosplash" />
		</java>
	</target>

	<!-- =================================
          target: generate.build.properties
         ================================= -->
	<target name="generate.build.properties" description="Takes in properties from build_local.properties and the command line overrides and generates a combined build.properties to use for the build">
		<exec executable="hostname" outputproperty="computer.hostname" />
		<echoproperties destfile="build.properties">
			<propertyset negate="true">
				<propertyref prefix="java." />
				<propertyref prefix="ant." />
				<propertyref prefix="awt." />
				<propertyref prefix="user." />
				<propertyref prefix="sun." />
			</propertyset>
		</echoproperties>
	</target>

	<!-- =================================
	      target: clean
	     ================================= -->
	<target name="clean" depends="generate.build.properties" description="Clean up temp and build files">
		<delete dir="${buildDirectory}" failonerror="false" />
	</target>

	<!-- - - - - - - - - - - - - - - - - -
          target: generate.base
         - - - - - - - - - - - - - - - - - -->
	<target name="generate.base" depends="copy.base.windows,copy.base">
		<!-- Copy test fragments into plugins dir -->
		<echo message="Copying test fragments" level="info" />
		<delete dir="${buildDirectory}/plugins" />
		<mkdir dir="${buildDirectory}/plugins" />
		<copy todir="${buildDirectory}/plugins">
			<fileset dir="${workspace}/tests">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<!-- - - - - - - - - - - - - - - - - -
          target: copy.base
          On non-Windows machines, copy eclipse and plugins/features directories to buildDirectory to set up for build
         - - - - - - - - - - - - - - - - - -->
	<target name="copy.base" unless="is.windows">
		<mkdir dir="${buildDirectory}" />
		<!-- Copy over the original base eclipse to a new location.
								Have to use exec cp to retain permissions on *nix, Mac -->
		<echo message="Copying eclipse" level="info" />
		<exec executable="cp">
			<arg line="-R ${vanilla.eclipse} ${baseLocation}" />
		</exec>
	</target>

	<!-- - - - - - - - - - - - - - - - - -
          target: copy.base.windows
         - - - - - - - - - - - - - - - - - -->
	<target name="copy.base.windows" if="is.windows">
		<mkdir dir="${buildDirectory}" />
		<!-- copy eclipse -->
		<copy todir="${baseLocation}">
			<fileset dir="${vanilla.eclipse}" includes="**/*" defaultexcludes="false" />
		</copy>
	</target>

	<!-- - - - - - - - - - - - - - - - - -
		  target: run.director
		 - - - - - - - - - - - - - - - - - -->
	<target name="run.director" description="Runs the p2 director installs">
		<java jar="${baseLocation}/plugins/${launcher.plugin}.jar" fork="true" failonerror="true" dir="${baseLocation}" timeout="900000">
			<arg line="-application org.eclipse.equinox.p2.director" />
			<arg line="-nosplash" />
			<arg line="-consoleLog" />
			<arg line="-repository ${p2.repo}" />
			<arg line="-installIU ${p2.installIU}" />
		</java>
	</target>

	<target name="-pre-test" description="Install test features and do pre-test setup.">
		<!-- Unzip the eclipse test framework zipfile -->
		<property name="eclipse.tests.p2.repo.dir" location="${basedir}/eclipse-test-framework-4.7.1a" />
		<unzip src="${basedir}/eclipse-test-framework-4.7.1a.zip" dest="${eclipse.tests.p2.repo.dir}" />
		<property name="eclipse.tests.p2.repo" value="file:${eclipse.tests.p2.repo.dir}" />
		<!-- Install the test feature we just built along with eclipse test framework -->
		<antcall target="run.director">
			<param name="p2.installIU" value="org.eclipse.test.feature.group,com.aptana.feature.feature.group,com.aptana.php.feature.feature.group,com.aptana.studio.tests.feature.group,${topLevelElementId}.feature.group" />
			<param name="p2.repo" value="${eclipse.tests.p2.repo},${studio3.p2.repo},${php.p2.repo},${studio3.test.p2.repo},file:${deploy.dir}" />
		</antcall>
		<!-- Modify the plugin_custimization.ini to set initial properties for tests! -->
		<concat append="true" destfile="${baseLocation}/plugins/${platform.plugin}/plugin_customization.ini">
			<filelist dir="${basedir}/prefs" files="plugin_customization.ini" />
		</concat>
	</target>

	<target name="-post-test" description="Collect all test results into single file and move to results directory.">
		<ant target="collect" antfile="${library-file}" dir="${baseLocation}">
			<property name="includes" value="com*.xml" />
			<property name="output-file" value="test-results.xml" />
		</ant>
		<mkdir dir="${testResultsDirectory}"/>
		<move file="${baseLocation}/test-results.xml" todir="${testResultsDirectory}" />
	</target>

	<target name="test" depends="build">
		<antcall target="-pre-test" />

		<if>
			<isset property="instrument.code" />
			<then>
				<mkdir dir="${coverageDirectory}" />
				<property name="agentvmparam" value="-javaagent:${basedir}/lib/jacocoagent.jar=destfile=${coverageDirectory}/coverage.exec,excludes=${jacoco.excludes}" />
			</then>
			<else>
				<property name="agentvmparam" value="" />
			</else>
		</if>

		<!-- Run the tests. -->
		<antcall target="run-core-test">
			<param name="test.plugin" value="com.aptana.php.tests.all" />
			<param name="test.classname" value="com.aptana.php.tests.all.CoreTests" />
		</antcall>
		<antcall target="run-ui-test">
			<param name="test.plugin" value="com.aptana.php.tests.all" />
			<param name="test.classname" value="com.aptana.php.tests.all.UITests" />
		</antcall>

		<antcall target="-post-test" />
	</target>

	<target name="performance" depends="generate.build.properties,copy.base.windows,copy.base">
		<antcall target="-pre-test" />

		<!-- Don't build, assume unit test built already ran and we can just re-use it! -->
		<!-- Grab the version number of build we're testing -->
		<pathconvert property="studio.version">
			<dirset dir="${baseLocation}/features">
				<include name="com.aptana.php.feature_*" />
			</dirset>
			<chainedmapper>
				<flattenmapper />
				<regexpmapper from="^com\.aptana\.php\.feature_([\d\.]+)\-.*$$" to="\1" />
			</chainedmapper>
		</pathconvert>

		<echo message="Running performance tests on Studio ${studio.version}, on host: ${computer.hostname}, java version: ${java.version}" />

		<!-- Run the tests. -->
		<antcall target="run-perf-test">
			<param name="test.plugin" value="com.aptana.radrails.tests.all" />
			<param name="test.classname" value="com.aptana.radrails.tests.all.PerformanceTests" />
		</antcall>

		<antcall target="-post-test" />
	</target>

	<target name="run-ui-test">
		<ant target="ui-test" antfile="${library-file}" dir="${baseLocation}">
			<reference refid="jacoco.lib" />
			<property name="timeout" value="${test.timeout}" />
			<property name="os" value="${baseos}" />
			<property name="ws" value="${basews}" />
			<property name="arch" value="${basearch}" />
			<property name="eclipse-home" value="${baseLocation}" />
			<property name="data-dir" value="${baseLocation}/junit-workspace -clean" />
			<property name="plugin-name" value="${test.plugin}" />
			<property name="classname" value="${test.classname}" />
			<property name="extraVMargs" value="-Djunit.properties=${basedir}/build.properties ${agentvmparam}" />
		</ant>
	</target>

	<target name="run-core-test">
		<ant target="core-test" antfile="${library-file}" dir="${baseLocation}">
			<reference refid="jacoco.lib" />
			<property name="timeout" value="${test.timeout}" />
			<property name="os" value="${baseos}" />
			<property name="ws" value="${basews}" />
			<property name="arch" value="${basearch}" />
			<property name="eclipse-home" value="${baseLocation}" />
			<property name="data-dir" value="${baseLocation}/junit-workspace -clean" />
			<property name="plugin-name" value="${test.plugin}" />
			<property name="classname" value="${test.classname}" />
			<property name="extraVMargs" value="-Djunit.properties=${basedir}/build.properties ${agentvmparam}" />
		</ant>
	</target>

	<target name="run-perf-test">
		<ant target="ui-test" antfile="${library-file}" dir="${baseLocation}">
			<property name="timeout" value="${test.timeout}" />
			<property name="test.target" value="performance" />
			<property name="os" value="${baseos}" />
			<property name="ws" value="${basews}" />
			<property name="arch" value="${basearch}" />
			<property name="eclipse-home" value="${baseLocation}" />
			<property name="data-dir" value="${baseLocation}/junit-workspace -clean" />
			<property name="plugin-name" value="${test.plugin}" />
			<property name="classname" value="${test.classname}" />
			<property name="extraVMargs" value="-XX:MaxPermSize=384m -Djunit.properties=${basedir}/build.properties -Declipse.perf.dbloc=${perf.db} -Declipse.perf.config=build=${studio.version};host=${computer.hostname};jvm=${java.version} -Dsetup.override.eclipseArgs=vm=/usr/bin/java ${extraPerfArgs}" />
		</ant>
	</target>
</project>
